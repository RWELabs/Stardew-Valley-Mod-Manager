<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Core.WinForms</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.WinForms.Core.Enums.PopupCloseAction">
            <summary>
            Specifies the way in which a popup was closed.
            </summary>
            <remarks>
            This information is usually provided in a 
            PopupControlContainer's <see cref="E:Syncfusion.Windows.Core.PopupControlContainer.CloseUp"/> event.
            You can use it to determine, in some cases, whether or not
            to use the updated data in a popup.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupCloseAction.Done">
            <summary>
            The user wants the changes made in the popup to be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupCloseAction.Canceled">
            <summary>
            The user canceled the popup and expects the changes, if any, to be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupCloseAction.Deactivated">
            <summary>
            The popup was deactivated due to the user clicking in some
            other window, a different application getting focus, etc.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment">
            <summary>
            Specifies the relative alignment of a popup child about its parent.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.TopLeft">
            <summary>
            The child will be aligned to the parent's top-left corner
            and drawn upwards and to the right of the parent's left border.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.TopRight">
            <summary>
            The child will be aligned to the parent's top-right corner
            and drawn upwards and to the left of the parent's right border.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.RightTop">
            <summary>
            The child will be aligned to the parent's top-right corner
            and drawn downwards and to the right of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.RightBottom">
            <summary>
            The child will be aligned to the parent's bottom-right corner
            and drawn upwards and to the right of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.BottomLeft">
            <summary>
            The child will be aligned to the parent's bottom-left corner
            and drawn downwards and to the right of the parent's left border.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.BottomRight">
            <summary>
            The child will be aligned to the parent's bottom-right corner
            and drawn downwards and to the left of the parent's right border.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.LeftTop">
            <summary>
            The child will be aligned to the parent's top-left corner
            and drawn downwards and to the left of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.LeftBottom">
            <summary>
            The child will be aligned to the parent's bottom-left corner
            and drawn downwards and to the right of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.Center">
            <summary>
            Does not indicate any of the above alignments.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.PopupHostBase">
            <summary>
            The top level form-derived class that hosts a <see cref="P:Syncfusion.WinForms.Core.PopupHostBase.PopupControlContainer"/>
            when it is dropped-down.
            </summary>
            <remarks>
            <para>You will normally not have to use this class or refer to
            an instance of this class. An instance of this class will
            be automatically generated by the <see cref="P:Syncfusion.WinForms.Core.PopupHostBase.PopupControlContainer"/> which
            will then set this as its parent when <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.ShowPopup(System.Drawing.Point)"/> is called on it.</para>
            <para>
            However, you can for example access an instance of this
            class from the PopupControlContainer and change certain properties.
            </para>
            <para>
            You can include a shadow in your popups by setting the NeedShadow property.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHostBase.showShadow">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHostBase.alignment">
            <summary>
            The alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHostBase.aboutToShow">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHostBase.overlapBorderColor">
            <summary>
            The border color.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHostBase.borderGap">
            <summary>
            The border gap.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHostBase.popupControlContainer">
            <summary>
            Gets or sets the popup control container.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHostBase.ignoreWorkingArea">
            <summary>
            Ignore working area when menu begin popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.PopupHostBase"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.SuspendLayout">
            <summary>
            Suspend layout operation.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.ResumeLayout(System.Boolean)">
            <summary>
            Resume the layout operation.
            </summary>
            <param name="preformLayout">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.IsShowing">
            <summary>
            Checks whether the popup is shown or not.
            </summary>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.Show">
            <summary>
            Shows the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.HidePopup">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.ComputeLayout">
            <summary>
            Computes size and position of popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc"/>.
            </summary>
            <param name="m">The message.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.DetachPopup">
            <summary>
            Releases the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.AttachPopup">
            <summary>
            Attaches the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.ComputeSize">
            <summary>
            Compute the size.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.ComputeControlLocation">
            <summary>
            Compute the control location.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.AdjustLocationForAlignment(System.Drawing.Point@,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment)">
            <summary>
            Adjust the location based on the alignment.
            </summary>
            <param name="loc">The location.</param>
            <param name="align">The alignment.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetScreenBounds(System.Windows.Forms.Control,System.Drawing.Point@)">
            <summary>
            Method used to get the screen bounds.
            </summary>
            <param name="parentControl">Represents the control.</param>
            <param name="location">Maintains the location.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetLocationForAlignment(System.Drawing.Point@,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment)">
            <summary>
            Method used to get the location for alignment.
            </summary>
            <param name="location">Maintains the location.</param>
            <param name="align">Represents the PopupRelativeAlignment.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetLocationForRTLAlignment(System.Drawing.Point@,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment)">
            <summary>
            Method used to get the location for RTL alignment.
            </summary>
            <param name="location">Maintains the location.</param>
            <param name="align">Represents the PopupRelativeAlignment.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetDefaultPopupLocation(System.Drawing.Point@,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)">
            <summary>
            Method used to get the default location for popup.
            </summary>
            <param name="prefLocation">Maintains the location.</param>
            <param name="newAlign">Represents the PopupRelativeAlignment.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.ComputeLocation">
            <summary>
            Compute the location.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetPreferredPopupLocation(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)">
            <summary>
            Method used to get the preferred location for popup.
            </summary>
            <param name="newAlign">Represents the PopupRelativeAlignment.</param>
            <returns>Returns the location.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetPreferredLeftAlignment">
            <summary>
            Method used to get the preferred alignment for left.
            </summary>
            <returns>Returns the PopupRelativeAlignment.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetPreferredRightAlignment">
            <summary>
            Method used to get the preferred alignment for right.
            </summary>
            <returns>Returns the PopupRelativeAlignment.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetPreferredTopAlignment">
            <summary>
            Method used to get the preferred alignment for top.
            </summary>
            <returns>Returns the PopupRelativeAlignment.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetPreferredBottomAlignment">
            <summary>
            Method used to get the preferred alignment for bottom.
            </summary>
            <returns>Returns the PopupRelativeAlignment.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetAdjustedLocation(System.Drawing.Point)">
            <summary>
            Get the adjusted location.
            </summary>
            <param name="loc">The location.</param>
            <returns>Returns the location.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.OnVisibleChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnVisibleChanged"/>.
            </summary>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.OnLocationChanged(System.EventArgs)">
            <summary>
            Occurs when location changed.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSizeChanged"/>.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint"/>.
            </summary>
            <param name="e">The paint event argument.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.UpdateVisibility">
            <summary>
            Updates popup host visibility and z-order.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.OnDeactivate(System.EventArgs)">
            <summary>
            Occurs when deactivate the host.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.GetIsMirrored">
            <summary>
            Checks the right to left mode.
            </summary>
            <returns>Return true if right to left mode.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources.
            </summary>
            <param name="disposing">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.OnHandleCreated(System.EventArgs)">
            <summary>
            Occurs while handle is created.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.PumpPaintMessages">
            <summary>
            Necessary since CS_SAVEBITS for this top-level is not good-enough to ensure that the window
            underneath is refreshed. Important when navigating menu using keyboard.
            </summary>        
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.InitializeComponent">
            <summary>
            Initialize the settings.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHostBase.AdjustPopupSize(System.Drawing.Point@)">
            <summary>
            Adjust the popup size based on the screen and popup size.
            </summary>
            <param name="location">The popup location.</param>
            <returns>True if size and location is adjusted. Otherwise false;</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.ShowShadow">
            <summary>
            Gets or sets a value indicating whether a shadow should
            be drawn around the popup window.
            </summary>
            <value>True if a shadow is needed; False otherwise.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.CurrentRelativeAlignment">
            <summary>
            Gets a <see cref="T:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment"/> value indicating
            the current alignment of the popup window.
            </summary>
            <value>
            A <see cref="T:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment"/> value.
            </value>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.OverlapBorderColor">
            <summary>
            Gets or sets the overlap border color with which this top-level form should be drawn.
            </summary>
            <value>A color value.</value>
            <remarks>
            <para>This color will be used by this form only when the <see cref="T:System.Windows.Forms.FormBorderStyle"/> is set to None.</para>
            <para>The form will draw a custom single-line border with this color and also draw
            the overlapped look, if overlapped borders are available.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.IgnoreWorkingArea">
            <summary>
            Gets or sets a value indicating whether to ignore working area when menu begin popup.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.Popup">
            <summary>
            Gets or sets the popup control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.RelativeAlignment">
            <summary>
            Gets or sets the position for popup.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.BorderGap">
            <summary>
            Gets or sets the border gap.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.PopupControl">
            <summary>
            Gets the popup control
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.PopupControlContainer">
            <summary>
            Gets or sets the PopupControlContainer that this PopupHost
            will host.
            </summary>
            <value>
            An implementation of the <see cref="T:Syncfusion.WinForms.Core.Interfaces.IPopupHost"/> interface.
            </value>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.IsInitialized">
            <summary>
            Gets or sets a value indicating whether state of drop-down window.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.ChildControl">
            <summary>
            Gets or sets the embedded child control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.LastSize">
            <summary>
            Gets or sets the last size of the window.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHostBase.CreateParams">
            <summary>
            Overrides the create parameters.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.PopupBase">
            <summary>
            Represents a class that provides the support to host any control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IPopupHost">
            <summary>
            Defines an interface that a <see cref="P:Syncfusion.WinForms.Core.Interfaces.IPopupHost.PopupHost"/> can take and parent itself to.
            </summary>
            <remarks>
            <para>
            <see cref="T:Syncfusion.WinForms.Core.PopupBase"/> provides a default implementation that should be useful for all
            practical purposes.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IPopupChild">
            <summary>
            Defines a generic interface which when implemented will allow
            that object / control to participate in the popup framework.
            </summary>
            <remarks>
            This interface should be implemented by an object / control that 
            acts like a popup window and wants to participate in the popup framework.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IPopup">
            <summary>
            A generic interface for any control that wants to participate 
            in the Popup framework.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopup.GetPopupParentControl">
            <summary>
            Returns the popup's control parent.
            </summary>
            <remarks>
            If such a control exists, then the Popup framework will use
            it in its popup activation logic.
            </remarks>
            <returns>The control.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopup.IsRelatedControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Indicates whether a specified control is part of the
            popup hierarchy.
            </summary>
            <param name="control">A control instance.</param>
            <param name="askPopupParent">True indicates this query should
            be passed to the IPopupParent, if any; False indicates you 
            should not query the popup parent.</param>
            <returns>True if the control is part of the Popup hierarchy;
            False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IKeyboardMessage">
            <summary>
            Defines the interface for the keyboard operations.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IKeyboardMessage.KeyboardMessage(System.Windows.Forms.Message@)">
            <summary>
            Handles the keyboard message.
            </summary>
            <param name="msg">The <see cref="T:System.Windows.Forms.Message"/> value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IMouseMoveMessage">
            <summary>
            Defines the interface for the mouse move operations.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IMouseMoveMessage.MouseMoveMessage(System.Windows.Forms.Message@)">
            <summary>
            Handles the mouse message.
            </summary>
            <param name="msg">The <see cref="M:Syncfusion.WinForms.Core.Interfaces.IMouseMoveMessage.MouseMoveMessage(System.Windows.Forms.Message@)"/> value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IMouseHook">
            <summary>
            Defines the interface for the mouse hook process.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IMouseHook.MouseHook(System.Int32,System.Drawing.Point,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Implement the mouse hook process.
            </summary>
            <param name="msg">The message.</param>
            <param name="point">The position.</param>
            <param name="hwnd">The control handle.</param>
            <param name="hitTestCode">The hit test code.</param>
            <param name="extraInfo">The additional information.</param>
            <returns>Returns the boolean.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IKeyboardHook">
            <summary>
            Defines the interfaces for the keyboard process.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IKeyboardHook.KeyboardHookProc(System.Int32,System.Int32)">
            <summary>
            The keyboard hook process used to handle the key board operations.
            </summary>
            <param name="wParam">The window parameter.</param>
            <param name="lParam">The integer contains the value.</param>
            <returns>Returns the b0olean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopupChild.Hide(Syncfusion.WinForms.Core.Enums.PopupCloseAction)">
            <summary>
            Hides the popup window.
            </summary>
            <param name="popupCloseType">The PopupCloseType value that indicates
            the mode in which this popup should be closed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopupChild.IsShowing">
            <summary>
            Indicates whether a popup is currently active / open.
            </summary>
            <returns>True if it is open; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Interfaces.IPopupChild.PopupParent">
            <summary>
            Gets the <see cref="T:Syncfusion.WinForms.Core.Interfaces.IPopupParent"/> parent.
            </summary>
            <value>An instance of the <see cref="T:Syncfusion.WinForms.Core.Interfaces.IPopupParent"/> interface.</value>
            <remarks>
            The Popup framework can handle a hierarchy of popups (like
            in a menu) for which it requires each popup child to provide
            a reference to its popup parent.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopupHost.GetPreferredLocation(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)">
            <summary>
            Provides the appropriate location to the popup given the alignment preferences.
            </summary>
            <remarks>
            <para>
            This method is usually called to determine whether the open popup should be closed
            due to some action in a different control. If this different control is a "related" control,
            the popup framework will not close the popup.
            </para>
            </remarks>
            <param name="prevRelativeAlignment">The previous alignment.</param>
            <param name="newRelativeAlignment">The new alignment.</param>
            <returns>Return the point.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Interfaces.IPopupHost.PopupHost">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.WinForms.Core.Interfaces.IPopupHost.PopupHost"/> this container is parented to.
            </summary>
            <value>
            An instance of the <see cref="P:Syncfusion.WinForms.Core.Interfaces.IPopupHost.PopupHost"/> class.
            </value>
            <remarks>
            If this is a control, you would set it to be a child of
            the <see cref="P:Syncfusion.WinForms.Core.Interfaces.IPopupHost.PopupHost"/> and position it appropriately in the set property.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Interfaces.IPopupParent">
            <summary>
            A generic interface that defines a popup parent, that will
            control the alignment of a popup, etc.
            </summary>
            <remarks><para>Any object / control that wants to act as a popup's parent
            and participate in the popup framework should implement this interface.</para>
            <para>Take a look at the PopupsInDepth sample under the Tools\Samples\Editors Package\PopupControlContainer\Advanced
            folder for an implementation of this interface.</para></remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopupParent.ChildClosing(Syncfusion.WinForms.Core.Interfaces.IPopupChild,Syncfusion.WinForms.Core.Enums.PopupCloseAction)">
            <summary>
            Will be called to indicate that the popup child was closed
            in the specified mode.
            </summary>
            <param name="childUI">The child that was closed.</param>
            <param name="popupCloseType">A <see cref="!:PopupCloseType"/> value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopupParent.GetLocationForPopupAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)">
            <summary>
            Returns the location for popup, given the preferred relative
            alignments.
            </summary>
            <remarks>
            <para>This method allows you to provide 8 different preferred positions for
            your popup, in any order.</para>
            <para>Different preferred positions are necessary because some positions
            may not be ideal for the popup as there may not be enough screen space
            for the popup when shown in that position.</para>
            <para>The popup will first call this method with previous Alignment set to
            <see cref="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.Center"/>. You should then return a location and
            designate this location as one of the 8 positions in the <see cref="T:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment"/>
            enumeration using the newAlignment reference. </para>
            <para>The popup will then check if there is enough space in the screen
            to draw at this location. If not, it will call this method again with
            previous Alignment set to newAlignment from the previous call.</para>
            <para>
            This goes on until you return a location that the popup finds acceptable.
            However, if you run out of locations before the popup can find an acceptable location,
            then you should set newAlignment to <see cref="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.Center"/>. The popup will then assume
            that you don't have any more positions to supply and do the best it can
            with the supplied location.
            </para>
            </remarks>
            <param name="prevAlignment">The previous alignment.</param>
            <param name="newAlignment">The new alignment designated for the returned location.</param>
            <returns>
            An ideal location for popup designated by one of the <see cref="T:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment"/> values in
            new Alignment. Or returns a Point.Empty and set newAlignment to <see cref="F:Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment.Center"/>
            if you do not intend to provide multiple preferred locations.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Interfaces.IPopupParent.GetBorderOverlapCue(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment)">
            <summary>
            Returns a line (defined by 2 points) in screen co-ordinates that indicates the
            border overlap between the child and parent.
            </summary>
            <param name="relativeAlignment">The preferred alignment selected using the
            <see cref="M:Syncfusion.WinForms.Core.Interfaces.IPopupParent.GetLocationForPopupAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)"/> method.</param>
            <remarks>
            If a valid line is provided, the popup child in that
            area will be drawn in an overlap style.
            </remarks>
            <returns>
            An array of 2 points representing a line (in screen co-ordinates)
            where the overlap takes place. NULL if no overlap is desired.
            </returns>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Interfaces.IPopupParent.IsRightToLeft">
            <summary>
            Gets a value indicating whether control's elements should be rendered right-to-left.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.inSetFocus">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.inOnPopup">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.parentControl">
            <summary>
            The parent control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.popupParent">
            <summary>
            The popup parent.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.discreetLocation">
            <summary>
            The location.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.popupHost">
            <summary>
            The popup host.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.listener">
            <summary>
            The popup close request listener.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.mouseHooker">
            <summary>
            The mouse hooker.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.fakeFocus">
            <summary>
            The boolean value indicates the this contains the focus or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.ignoreDialogKey">
            <summary>
            The boolean indicates ignore the dialog key.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.ignoreKeys">
            <summary>
            The boolean value indicates the ignore the keys.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.ignoreMouseMessages">
            <summary>
            The boolean value indicates the ignore the mouse messages.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.currentPopupChild">
            <summary>
            The current popup child.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.relativeAlignment">
            <summary>
            Holds the position for popup.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.needDisposeHost">
            <summary>
            The boolean value indicates the need to dispose or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.formSubclass">
            <summary>
            The form sub class.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.parentForm">
            <summary>
            The parent form.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.controlSize">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.args">
            <summary>
            Shows the popup at the specified location.
            </summary>
            <param name="location">A point in screen coordinates.
            Can be Point.Empty.</param>
            <remarks>
            <para>A popup's position is determined as follows.</para>
            <para>First, if an <see cref="T:Syncfusion.WinForms.Core.Interfaces.IPopupParent"/> interface is associated (using
            the <see cref="P:Syncfusion.WinForms.Core.PopupBase.PopupParent"/> property), then it is queried for the preferred
            position. If there is no such interface, the location
            specified in the <see cref="M:Syncfusion.WinForms.Core.PopupBase.Show(System.Drawing.Point)"/> method call is used. If ShowPopup
            was called with Point.Empty, then the <see cref="P:Syncfusion.WinForms.Core.PopupBase.ParentControl"/>'s bounds are used
            to determine an appropriate position to drop-down.</para>
            <para>This will throw a <see cref="!:BeforePopup"/> followed by a <see cref="T:Syncfusion.WinForms.Core.PopupBase"/> event.</para>
            <para>Use <see cref="M:Syncfusion.WinForms.Core.PopupBase.Hide(Syncfusion.WinForms.Core.Enums.PopupCloseAction)"/> to hide the popup in code.</para>
            <para>
            When the popup is closed either programmatically or by the user,
            the <see cref="!:CloseUp"/> event will be thrown that will indicate
            whether the popup was closed or canceled.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.preventEventsForToolTip">
            <summary>
            The boolean value indicates the prevents the events for tool tip.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupBase.showShadow">
            <summary>
            The boolean value indicates the shadow can show or not.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.PopupBase"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.PopupBase"/> class with a specified container.
            </summary>
            <param name="container">A <see cref="T:System.ComponentModel.IContainer"/> that represents the container of the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.</param>
            <remarks>
            <para>Containers are objects that encapsulate and track zero or more components. In this context, containment refers to logical containment, not visual containment. 
            You can use components and containers in a variety of scenarios, including scenarios that are both visual and not visual.</para>
            <para><bold>Note to Implementers:</bold>  To be a container, the class must implement the IContainer interface, which supports methods for adding, removing and retrieving components.</para>
            <para>Unlike other controls, a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> is not a direct child of your form (though this is the case during design-time).
            This requires you to explicitly dispose of this control before the form gets destroyed.
            With this constructor override, the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> automatically plugs itself into a form's
            default component-containment pattern (through the IContainer member) during design-time. If you create this class in code, then you have to set it up manually.</para>
            <para>The implementation simply adds the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> instance into the container.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.IsShowing">
            <summary>
            Indicates whether the popup is currently dropped down.
            </summary>
            <returns>True indicates popup is dropped down; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.GetPreferredLocation(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)">
            <summary>
            Gets preferred location.
            </summary>
            <param name="prevAlignment">The previous alignment</param>
            <param name="newAlignment">The new alignment.</param>
            <returns>Returns the preferred location.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Show(System.Drawing.Point)">
            <summary>
            Shows the popup.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Hide">
            <summary>
            Hides a popup that is open.
            </summary>
            <remarks>
            <para>This method will hide the popup with the <see cref="F:Syncfusion.WinForms.Core.Enums.PopupCloseAction.Canceled"/> mode.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Hide(Syncfusion.WinForms.Core.Enums.PopupCloseAction)">
            <summary>
            Hides a popup with the specified <see cref="T:Syncfusion.WinForms.Core.Enums.PopupCloseAction"/> mode.
            </summary>
            <param name="popupCloseType">A PopupCloseType value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.IsRelatedControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Checks whether the control is a related control.
            </summary>
            <param name="control">The control</param>
            <param name="askPopupParent">The boolean value.</param>
            <returns>Returns true if control relates properly.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IMouseMoveMessage#MouseMoveMessage(System.Windows.Forms.Message@)">
            <summary>
            The mouse message.
            </summary>
            <param name="m">A message.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IMouseHook#MouseHook(System.Int32,System.Drawing.Point,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The mouse hook process.
            </summary>
            <param name="msg">A message.</param>
            <param name="point">The point.</param>
            <param name="hwnd">The handle.</param>
            <param name="hitTestCode">The hit test code</param>
            <param name="extraInfo">The extra information.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IKeyboardMessage#KeyboardMessage(System.Windows.Forms.Message@)">
            <summary>
            The keyboard message.
            </summary>
            <param name="m">A message.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IKeyboardHook#KeyboardHookProc(System.Int32,System.Int32)">
            <summary>
            The keyboard hook process.
            </summary>
            <param name="wParam">The window handle parameter.</param>
            <param name="lParam">The handle parameter.</param>
            <returns>Returns the process.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IPopupParent#GetLocationForPopupAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)">
            <summary>
            Get the location for popup.
            </summary>
            <param name="prevAlignment">Previous alignment.</param>
            <param name="newAlignment">The new alignment.</param>
            <returns>Returns the points.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IPopupParent#GetBorderOverlapCue(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment)">
            <summary>
            Gets the border points
            </summary>
            <param name="relativeAlignment">The relative alignment.</param>
            <returns>Returns the points collection.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IPopupParent#ChildClosing(Syncfusion.WinForms.Core.Interfaces.IPopupChild,Syncfusion.WinForms.Core.Enums.PopupCloseAction)">
            <summary>
            Occurs while child closing occurs.
            </summary>
            <param name="childUI">The child.</param>
            <param name="popupCloseType">The popup close type.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IPopup#GetPopupParentControl">
            <summary>
            Gets the popup parent control.
            </summary>
            <returns>Returns the popup parent control</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.EnsurePopupHost">
            <summary>
            Ensures that the <see cref="P:Syncfusion.WinForms.Core.PopupBase.PopupHost"/> property returns a valid PopupHost.
            </summary>
            <remarks>
            <para>
            Normally the <see cref="P:Syncfusion.WinForms.Core.PopupBase.PopupHost"/> property will return a non-NULL value only when
            the popup was displayed at least once. Calling this method will ensure that the property
            returns a non-NULL value.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.IsInSetFocus">
            <summary>
            Specifies whether the control is in set focus.
            </summary>
            <returns>Returns the boolean value</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.FocusParent">
            <summary>
            Sets focus on the popup parent control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.FocusFirstVisibleParent">
            <summary>
            Focuses first visible parent.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.ConfirmDeactivate">
            <summary>
            This method is called from the BarManager class when the parent form is deactivated.
            It checks whether the user clicked inside a child control of this PopupControlContainer.
            If this is not the case (e.g. user clicked on another window on the desktop) then the popup gets hidden.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. <see cref="M:System.Windows.Forms.Control.WndProc"/>.
            </summary>
            <param name="m">The message.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ProcessDialogKey"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns the boolean.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.OnBeforePopup(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforePopup event.
            </summary>
            <param name="args">A CancelEventArgs that contains the event data.</param>
            <remarks>
            <para>The OnBeforePopup method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors:  When overriding OnBeforePopup in a derived
            class, be sure to call the base class's OnBeforePopup method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.OnCloseUp(Syncfusion.WinForms.Core.Enums.PopupCloseAction)">
            <summary>
            Raises the <see cref="!:CloseUp"/> event.
            </summary>
            <param name="popupCloseType">A <see cref="T:Syncfusion.WinForms.Core.Enums.PopupCloseAction"/>.</param>
            <remarks>
            <para>The OnCloseUp method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Note to Inheritors:  When overriding OnCloseUp in a derived
            class, be sure to call the base class's OnCloseUp method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.OnPopup(System.EventArgs)">
            <summary>
            Raises the <see cref="T:Syncfusion.WinForms.Core.PopupBase"/> event.
            </summary>
            <param name="args">An EventArgs instance containing
            data pertaining to this event.</param>
            <remarks>
            <para>The OnPopup method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Note to Inheritors:  When overriding OnPopup in a derived
            class, be sure to call the base class's OnPopup method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources.
            </summary>
            <param name="disposing">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.CreatePopupHost">
            <summary>
            Creates a new popup host.
            </summary>
            <returns>Returns the popup host.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.ProcessMouseMessage(System.Windows.Forms.Control,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Process the mouse message.
            </summary>
            <param name="destination">The destination.</param>
            <param name="msg">The message.</param>
            <param name="lParam">The handle parameter.</param>
            <param name="wParam">The window parameter</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.VeryifyMouseBasedDeactivation(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Verify the mouse mouse based activation.
            </summary>
            <param name="destinationControl">The destination control.</param>
            <param name="msg">The message.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Occurs when size changed.</summary>
            <param name="e"> The event arguments.</param>   
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.GetLocationForPopupAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@)">
            <summary>
            Get the location for popup.
            </summary>
            <param name="prevAlignment">Previous alignment</param>
            <param name="newAlignment">The new alignment.</param>
            <returns>returns the point.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.GetBorderOverlapCue(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment)">
            <summary>
            Get the border.
            </summary>
            <param name="relativeAlignment">The alignment.</param>
            <returns>Returns the points</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.ChildClosing(Syncfusion.WinForms.Core.Interfaces.IPopupChild,Syncfusion.WinForms.Core.Enums.PopupCloseAction)">
            <summary>
            Occurs while child closing.
            </summary>
            <param name="childUI">The child.</param>
            <param name="popupCloseType">The popup type.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.UpdateRightToLeftFromParentControl">
            <summary>
            Update the right to left mode.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.AttachDelegates">
            <summary>
            Attach the delegates.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.DetachDelegates">
            <summary>
            Releases the delegates.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.ParentControl_Disposed(System.Object,System.EventArgs)">
            <summary>
            Occurs when disposed the parent control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">A event arguments.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.ParentControl_RightToLeftChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when right to left mode of the parent control gets changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">A event arguments.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupBase.GetIsMirrored">
            <summary>
            Gets the boolean value indicating the right to left mode.
            </summary>
            <returns>Returns true if this is in right to left mode.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.DesignMode">
            <summary>
            Gets a value indicating whether the control is in design-mode.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.Style">
            <summary>
            Gets or sets the drop down style.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.PopupHost">
            <summary>
            Gets or sets a reference to the PopupHost that will be
            used to host this PopupControlContainer when dropped down.
            </summary>
            <value>The PopupHost object that will host this PopupControlContainer.</value>
            <remarks>
            <para>PopupHost is the top level form-based control that hosts
            this PopupControlContainer when dropped down.</para>
            <para>
            The PopupControlContainer usually creates a custom
            PopupHost when it is asked to drop down. However, you
            can provide your own PopupHost if you have a customized
            version.
            </para>
            <para>
            You can also get a reference to the <see cref="P:Syncfusion.WinForms.Core.PopupBase.PopupHost"/>
            that the PopupControlContainer uses by default and make
            changes to it. The PopupControlContainer creates a
            default PopupHost when there is no PopupHost supplied
            to it, but <see cref="M:Syncfusion.WinForms.Core.PopupBase.Show(System.Drawing.Point)"/> gets called to show the popup.
            Hence, the best place to get the default PopupHost
            associated with this PopupControlContainer is in the
            <see cref="!:BeforePopup"/> handler. Or call <see cref="M:Syncfusion.WinForms.Core.PopupBase.EnsurePopupHost"/> to
            create the default PopupHost if it is not yet created.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.ParentControl">
            <summary>
            Gets or sets the PopupControlContainer's control parent.
            </summary>
            <value>A control instance.</value>
            <remarks>
            <para>The Parent-Child relationship in this case is NOT similar
            to the one in the control hierarchy.</para>
            <para>
            When you specify a Parent Control via
            ParentControl and pass a Point.Empty location to
            ShowPopup, the popup location will be dynamically determined
            based on the ParentControl bounds and the screen area.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.PopupParent">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Core.Interfaces.IPopupParent"/> parent.
            </summary>
            <value>An instance that implements <see cref="T:Syncfusion.WinForms.Core.Interfaces.IPopupParent"/>.</value>
            <remarks>
            <para>When you associate an IPopupParent interface with the PopupControlContainer
            you get even more control over the alignment and positioning
            of the Popup, (this you would
            do instead of the PopupControl based parenting).</para>
            <para>When you provide this interface, the alignment and
            positioning logic is delegated to this interface.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.ShowShadow">
            <summary>
            Gets or sets a value indicating whether a shadow should
            be drawn around the popup window.
            </summary>
            <value>True if a shadow is needed; False otherwise.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.Syncfusion#WinForms#Core#Interfaces#IPopupParent#IsRightToLeft">
            <summary>
            Gets a value indicating whether the right to left mode.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.IgnoreMouseMessages">
            <summary>
            Gets or sets a value indicating whether to ignore all mouse messages.
            </summary>
            <value>True to ignore all mouse messages; False otherwise. Default is False.</value>
            <remarks>
            <para>When the popup is showing it will "swallow" all the mouse messages that are sent to
            controls not in the popup-hierarchy. When showing, the popup will also listen to
            mouse messages to determine if the popup should be closed (for mouse down
            outside the popup-hierarchy, for example).</para>
            <para>
            To prevent this behavior, set this property to True.</para>
            <para>When set to True, the popup will close only when you call
            the <see cref="M:Syncfusion.WinForms.Core.PopupBase.Hide(Syncfusion.WinForms.Core.Enums.PopupCloseAction)"/> method or when a new popup gets shown.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.IgnoreKeys">
            <summary>
            Gets or sets a value indicating whether to ignore all keys.
            </summary>
            <value>True to ignore all keys; False otherwise. Default is False.</value>
            <remarks>
            When the popup is showing, it will "swallow" all the WM_KEYDOWN and WM_CHAR
            messages. To prevent it, set this property to True.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.CurrentPopupChild">
            <summary>
            Gets or sets the current popup child in the popup hierarchy.
            </summary>
            <value>An instance of <see cref="T:Syncfusion.WinForms.Core.Interfaces.IPopupChild"/> interface.</value>
            <remarks>When you want to show a parent-child hierarchy of popups,
            call this property on the parent popup before showing the child popup.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.MouseHooker">
            <summary>
            Gets or sets the mouse hooker.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.DefaultSize">
            <summary>
            Gets the default size.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.DefaultMargin">
            <summary>
            The default margin.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupBase.RelativeAlignment">
            <summary>
            Gets or sets the position for popup.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.KeyboardProcHooker">
            <summary>
            Represents a class that contains the keyboard process handles.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.thisProcessID">
            <summary>
            The process id.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.handle">
            <summary>
            The handle.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.hookDisable">
            <summary>
            The boolean indicates the hook can disable.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.messageHookHandle">
            <summary>
            The mouse hook handle.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.messageHookRoot">
            <summary>
            The mouse hook root.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.#ctor(System.IntPtr,Syncfusion.WinForms.Core.Interfaces.IKeyboardHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.KeyboardProcHooker"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="client">The client/</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Syncfusion.WinForms.Core.KeyboardProcHooker"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.Dispose">
            <summary>
            Releases a unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.HookMessage">
            <summary>
            Hook the message.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.MessageHookProc(System.Int32,System.Int32,System.Int32)">
            <summary>
                Hook process used for catch mouse messages.
            </summary>
            <param name="code">The code.</param>
            <param name="wParam">Window parameter.</param>
            <param name="lParam">The handle parameter.</param>
            <returns>Returns the pointer.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.UnHookMessage">
            <summary>
            Unhook the message.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.KeyboardProcHooker.DisableMessageHook">
            <summary>
            Gets or sets a value indicating whether the hook message can be disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.KeyboardProcHooker.HookMessages">
            <summary>
            Gets or sets a value indicating whether the hook message can be done.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.KeyboardProcHooker.MessageHookObject">
            <summary>
            Represents a class that contains the message hook object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.MessageHookObject.HC_ACTION">
            <summary>
            The action.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.KeyboardProcHooker.MessageHookObject.reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.MessageHookObject.#ctor(Syncfusion.WinForms.Core.KeyboardProcHooker)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.KeyboardProcHooker.MessageHookObject"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.KeyboardProcHooker.MessageHookObject.Callback(System.Int32,System.Int32,System.Int32)">
            <summary>
            The callback message.
            </summary>
            <param name="code">The code.</param>
            <param name="wParam">Window parameter.</param>
            <param name="lParam">The handle parameter.</param>
            <returns>Returns the pointer.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.FormWindow">
            <summary>
            Represents a class that provides the customized window support.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.FormWindow.popupContainer">
            <summary>
            The popup container
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.FormWindow.#ctor(Syncfusion.WinForms.Core.PopupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.FormWindow"/> class.
            </summary>
            <param name="popupContainer">The popup container</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.FormWindow.DestroyHandle">
            <summary>
            Destroys the window and its handle.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.FormWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.
            </summary>
            <param name="m">A System.Windows.Forms.Message that is associated with the current Windows
            message. </param>
        </member>
        <member name="T:Syncfusion.WinForms.Core.PopupCloseRequestListener">
            <summary>
            Represents a class that provides support to list the popup close actions.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupCloseRequestListener.popup">
            <summary>
            The popup container.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupCloseRequestListener.parentControl">
            <summary>
            The parent control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupCloseRequestListener.popupHost">
            <summary>
            The popup host control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupCloseRequestListener.#ctor(Syncfusion.WinForms.Core.PopupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.PopupCloseRequestListener"/> class.
            </summary>
            <param name="popup">The popup container.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupCloseRequestListener.Dispose">
            <summary>
            Dispose the managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupCloseRequestListener.Attach">
            <summary>
            Attach the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupCloseRequestListener.Release">
            <summary>
            Release the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupCloseRequestListener.ParentLostFocus(System.Object,System.EventArgs)">
            <summary>
            Occurs when parent lost focus.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupCloseRequestListener.MenuCloseEvent(System.Object,System.EventArgs)">
            <summary>
            Occurs when menu closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupCloseRequestListener.FormDeactivate(System.Object,System.EventArgs)">
            <summary>
            occurs when deactivate the form.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupCloseRequestListener.IgnoreDeactivateTick">
            <summary>
            Gets or sets a integer value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupCloseRequestListener.PopupHost">
            <summary>
            Gets or sets the popup host.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupCloseRequestListener.ParentControl">
            <summary>
            Gets or sets the parent control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.MouseProcHookerUtil">
            <summary>
            Represents a class that contains the mouse process hooker helper functions.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MouseProcHookerUtil.thisProcessID">
            <summary>
            The process id.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MouseProcHookerUtil.clientHL">
            <summary>
            The client.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MouseProcHookerUtil.handle">
            <summary>
            The handle.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MouseProcHookerUtil.hookDisable">
            <summary>
            The hook disable.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MouseProcHookerUtil.messageHookHandle">
            <summary>
            The mouse hook handle.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MouseProcHookerUtil.messageHookRoot">
            <summary>
            The message hook root.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.#ctor(System.IntPtr,Syncfusion.WinForms.Core.Interfaces.IMouseHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.MouseProcHookerUtil"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="clientHL">The client handle.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Syncfusion.WinForms.Core.MouseProcHookerUtil"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.Dispose">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.HookMessage">
            <summary>
            Hook the message.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.MessageHookProc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Hook process used for catch mouse messages.
            </summary>
            <param name="code">The code.</param>
            <param name="wParam">Window parameter.</param>
            <param name="lParam">The handle parameter.</param>
            <returns>The message pointer.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.UnHookMessage">
            <summary>
            Unhook the message.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.MouseProcHookerUtil.DisableMessageHook">
            <summary>
            Gets or sets a value indicating whether can disable hook message.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.MouseProcHookerUtil.HookMessages">
            <summary>
            Gets or sets a value indicating whether the message can hook.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.MouseProcHookerUtil.MessageHookObject">
            <summary>
            Represents a class that contains the message hook object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MouseProcHookerUtil.MessageHookObject.reference">
            <summary>
            The reference.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.MessageHookObject.#ctor(Syncfusion.WinForms.Core.MouseProcHookerUtil)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.MouseProcHookerUtil.MessageHookObject"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MouseProcHookerUtil.MessageHookObject.Callback(System.Int32,System.Int32,System.Int32)">
            <summary>
            Call back.
            </summary>
            <param name="code">A code.</param>
            <param name="wParam">Window parameter.</param>
            <param name="lParam">Handle parameter.</param>
            <returns>Returns the pointer value.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.PopupHelper">
            <summary>
            Represent a class that provides the helper methods for the popup container.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHelper.SWP_NOACTIVATE">
            <summary>
            The constant value for no active.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHelper.SWP_SHOWWINDOW">
            <summary>
            The constant value for show window.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ShowWindowTopMost(System.IntPtr,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Show the window at top.
            </summary>
            <param name="handle">The handle.</param>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.SetVisibleNoActivate(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Set visible when not active.
            </summary>
            <param name="control">The control.</param>
            <param name="visible">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.GetParentControl(System.IntPtr)">
            <summary>
            Get the parent control.
            </summary>
            <param name="handle">The handle.</param>
            <returns>Returns the parent control.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ComputeDefaultTopBottomAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Compute the default top bottom alignment.
            </summary>
            <param name="prevAlignment">The previous alignment.</param>
            <param name="newAlignment">The new alignment.</param>
            <param name="parentBounds">The rectangle.</param>
            <param name="isRTL">The boolean indicates the right to left mode.</param>
            <returns>Returns the point.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ComputeDefaultTopBottomAlignmentExt(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@,System.Windows.Forms.Control,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Compute the default top bottom alignment.
            </summary>
            <param name="prevAlignment">The previous alignment.</param>
            <param name="newAlignment">The new alignment.</param>
            <param name="parent">The parent.</param>
            <param name="parentBounds">The rectangle.</param>
            <param name="isRTL">The boolean indicates the right to left mode.</param>
            <returns>Returns the point.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ComputeDefaultLeftRightAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Compute the default left right alignment.
            </summary>
            <param name="prevAlignment">The previous alignment.</param>
            <param name="newAlignment">The new alignment.</param>
            <param name="parentBounds">The rectangle.</param>
            <param name="isRTL">The boolean indicates the right to left mode.</param>
            <returns>Returns the point.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ComputeDefaultLeftRightAlignmentExt(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@,System.Windows.Forms.Control,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Compute the default left right alignment.
            </summary>
            <param name="prevAlignment">The previous alignment.</param>
            <param name="newAlignment">The new alignment.</param>
            <param name="parent">The parent.</param>
            <param name="parentBounds">The rectangle.</param>
            <param name="isRTL">The boolean indicates the right to left mode.</param>
            <returns>Returns the point.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ComputeLocationFromAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,System.Drawing.Rectangle)">
            <summary>
            Compute the location based on the alignment.
            </summary>
            <param name="align">The alignment.</param>
            <param name="dropDownBounds">The bounds.</param>
            <returns>Returns the point.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ComputeDefaultPopupAlignment(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment@,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,System.Drawing.Rectangle)">
            <summary>
            Compute the location based on default popup alignment.
            </summary>
            <param name="prevAlign">The previous alignment.</param>
            <param name="newAlign">The next alignment</param>
            <param name="firstPrefAlignment">The first preference alignment.</param>
            <param name="lastPrefAlignment">The last preference alignment</param>
            <param name="parentBounds">The parent bounds.</param>
            <returns>Returns the location.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHelper.ComputeDefaultBorderOverlapCue(Syncfusion.WinForms.Core.Enums.PopupRelativeAlignment,System.Drawing.Rectangle)">
            <summary>
            Compute the default border locations.
            </summary>
            <param name="rightAlign">The alignment.</param>
            <param name="dropDownBounds">The bounds.</param>
            <returns>Returns the locations.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.SystemInfo">
            <summary>
            This class will provide more information that the .Net equivalent ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.SystemInfo.appTypeKnown">
            <summary>
            The app key down.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.SystemInfo.isDotNetApp">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.SystemInfo.executablePathURI">
            <summary>
            The string value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.SystemInfo.isDevStudio">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.SystemInfo.KeyboardCuesAlwaysOn">
            <summary>
            Gets a value indicating whether the menu access keys are always underlined.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.SystemInfo.IsDotNetApp">
            <summary>
            Gets or sets a value indicating whether the current application is a .Net application.
            </summary>
            <value>True if .Net; false otherwise.</value>
            <remarks>
            By default, this method will automatically determine whether or not the current active
            app is a .Net app or a native app. However, to speed up performance (by a fraction of a second),
            you can set this value appropriately at the beginning of your app. Note that
            an incorrect setting would cause unforeseen behavior.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Core.SystemInfo.IsDevStudio">
            <summary>
            Gets a value indicating whether the component is used inside developer studio.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.MessageFilterEntryHelper">
            <summary>
            Represents a class that provides support for handling mouse and keyboard process,
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.singleton">
            <summary>
            This needs to be ThreadStatic because pre-filter notifications happen on 
            a thread-basis.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.isDevEnv">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.isEnv">
            <summary>
            WF-49801-Set environment for VB6 to close dropdown in SfComboBox.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.isDisableReleaseHook">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.filters">
            <summary>
            The array list.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.suspendHashTable">
            <summary>
            The hash table.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.hashTableFilters">
            <summary>
            The hash table.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.flag">
            <summary>
            The flag.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.mouseProcHooker">
            <summary>
            The mouse process hooker.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.keyboardProcHooker">
            <summary>
            The keyboard process hooker.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.parsingFilters">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.filtersToRemoveAfterParse">
            <summary>
            The array list.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.MessageFilterEntryHelper.messageFilterEntryHelperWeakContainer">
            <summary>
            The message filter entry helper.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.WinForms.Core.MessageFilterEntryHelper"/> class from being created.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.Dispose">
            <summary>
            Releases the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.Syncfusion#WinForms#Core#Interfaces#IMouseHook#MouseHook(System.Int32,System.Drawing.Point,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Handle the mouse hook process.
            </summary>
            <param name="msg">The message.</param>
            <param name="point">The point.</param>
            <param name="hwnd">The control handle.</param>
            <param name="wHitTestCode">The integer value contains the hit test code.</param>
            <param name="extraInfo">The integer value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.Syncfusion#WinForms#Core#Interfaces#IKeyboardHook#KeyboardHookProc(System.Int32,System.Int32)">
            <summary>
            Implements the keyboard hook process.
            </summary>
            <param name="wParam">The integer contains the windows parameter.</param>
            <param name="lParam">The integer value contains the value used to keyboard.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Implements the message filter implementation.
            </summary>
            <param name="m">The message.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.RemoveMessageFilter(System.Windows.Forms.IMessageFilter)">
            <summary>
            Remove the message filter.
            </summary>
            <param name="filter">The interface that will receive messages for filtering in a .NET app.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.Suspend(System.Object)">
            <summary>
            Suspends applying filters by tag.
            </summary>
            <param name="tag">The object.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.Resume(System.Object)">
            <summary>
            Resumes applying filters by tag.
            </summary>
            <param name="tag">The object</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.AddMessageFilter(System.Windows.Forms.IMessageFilter,System.Boolean,System.Object)">
            <summary>
            Add the message filter.
            </summary>
            <param name="filter">The interface that will receive messages for filtering in a .NET app.</param>
            <param name="onTop">Specifies whether or not this filter should be inserted on top (with highest priority).</param>
            <param name="tag">The object.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.AddMessageFilter(System.Windows.Forms.IMessageFilter,System.Boolean)">
            <summary>
            Utility to help you filter messages in both a .NET and Native app.
            </summary>
            <param name="filter">The interface that will receive messages for filtering in a .NET app.</param>
            <param name="onTop">Specifies whether or not this filter should be inserted on top (with highest priority).</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.SuspendInternal(System.Object)">
            <summary>
            Suspend the internal process.
            </summary>
            <param name="tag">The object.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.ResumeInternal(System.Object)">
            <summary>
            Resume the internal process.
            </summary>
            <param name="tag">The object.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.AddMessageFilterInternal(System.Windows.Forms.IMessageFilter,System.Boolean,System.Object)">
            <summary>
            Add the message filter.
            </summary>
            <param name="filter">The interface that will receive messages for filtering in a .NET app.</param>
            <param name="onTop">Specifies whether or not this filter should be inserted on top (with highest priority).</param>
            <param name="tag">The object.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.AddMessageFilterInternal(System.Windows.Forms.IMessageFilter,System.Boolean)">
            <summary>
            Add the internal message filter.
            </summary>
            <param name="filter">The interface that will receive messages for filtering in a .NET app.</param>
            <param name="onTop">Specifies whether or not this filter should be inserted on top (with highest priority).</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.RemoveMessageFilterInternal(System.Windows.Forms.IMessageFilter)">
            <summary>
            Remove the message filter.
            </summary>
            <param name="filter">The interface that will receive messages for filtering in a .NET app.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.OnAppIdle(System.Object,System.EventArgs)">
            <summary>
            Occurs when the application is idle.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.OnBeforeFiltersEnumeration">
            <summary>
            Change the parse filter on before filters.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.VerifyHooksRequirement">
            <summary>
            Verify the hooks requirement
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.OnAfterFiltersEnumeration">
            <summary>
            Change the parse filter mode after applied the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.InitHooks">
            <summary>
            Initialize the hooks.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelper.ReleaseHooks">
            <summary>
            Release the hooks used in this class.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.MessageFilterEntryHelper.Singleton">
            <summary>
            Gets the <see cref="T:Syncfusion.WinForms.Core.MessageFilterEntryHelper"/> value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.MessageFilterEntryHelper.DisableReleaseHook">
            <summary>
            Gets or sets a value indicating whether to disable release hook or not
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.MessageFilterEntryHelperWeakContainer">
            <summary>
            Represents a class that provides the message filter support.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelperWeakContainer.#ctor(Syncfusion.WinForms.Core.MessageFilterEntryHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.MessageFilterEntryHelperWeakContainer"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.MessageFilterEntryHelperWeakContainer.AppIdleWeakEventHandler(System.Object,System.EventArgs)">
            <summary>
            Application idle weak event handler.
            </summary>
            <param name="sender">The object.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Core.PopupManager">
            <summary>
            Represents a class that provides the support for popup control container.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupManager.singleton">
            <summary>
            The popup manager.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupManager.curPopup">
            <summary>
            The current popup child control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupManager.latestSetFocusSetting">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupManager.setFocusTimer">
            <summary>
            The timer.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupManager.latestFocusControl">
            <summary>
            The last focus control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupManager.previousPopUp">
            <summary>
            The previous popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.PopupManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.Dispose">
            <summary>
            Releases the used resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Handles the filter message.
            </summary>
            <param name="m">The message.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.Syncfusion#WinForms#Core#Interfaces#IMouseHook#MouseHook(System.Int32,System.Drawing.Point,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Implements the mouse hook process.
            </summary>
            <param name="msg">The message.</param>
            <param name="point">The position.</param>
            <param name="hwnd">The handle.</param>
            <param name="wHitTestCode">The hit test code.</param>
            <param name="extraInfo">The integer value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.Syncfusion#WinForms#Core#Interfaces#IKeyboardHook#KeyboardHookProc(System.Int32,System.Int32)">
            <summary>
            Handles the keyboard hook process.
            </summary>
            <param name="wParam">The integer value contains the window parameter.</param>
            <param name="lParam">The integer value.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.SetCurrentPopupClient(Syncfusion.WinForms.Core.Interfaces.IPopupChild,System.Boolean,System.Boolean)">
            <summary>
            Set the current popup client.
            </summary>
            <param name="client">Popup client.</param>
            <param name="active">The boolean value indicates active.</param>
            <param name="callKillFocusOnFocused">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.IsAncestor(Syncfusion.WinForms.Core.Interfaces.IPopupChild,Syncfusion.WinForms.Core.Interfaces.IPopupParent)">
            <summary>
            Gets the the boolean value.
            </summary>
            <param name="popup">The popup child.</param>
            <param name="parent">The popup parent.</param>
            <returns>Returns the boolean value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.CallKillFocusOnFocused">
            <summary>
            Calls the kill focus.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.CallSetFocusOnFocused">
            <summary>
            Sets the focus.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.SetFocusTimer_Event(System.Object,System.EventArgs)">
            <summary>
            Delayed set focus.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param> 
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupManager.SetCurrentPopup(Syncfusion.WinForms.Core.Interfaces.IPopupChild,System.Boolean,System.Boolean)">
            <summary>
            Set the current popup.
            </summary>
            <param name="popup">The popup child.</param>
            <param name="active">The boolean value indicates the active.</param>
            <param name="callKillFocusOnFocused">The boolean value.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupManager.ActivePopupClient">
            <summary>
            Gets the active popup child.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupManager.Singleton">
            <summary>
            Gets the popup manager.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupManager.ActivePopup">
            <summary>
            Gets the current popup control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo">
            <summary>
            Represents the class to define the style for <see cref="!:Syncfusion.WinForms.Input.SfComboBox"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.defaultStyle">
            <summary>
            Maintains the default style of the <see cref="!:Syncfusion.WinForms.Input.ComboBoxEditorStyleInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.#ctor(Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo"/> class. 
            </summary>
            <param name="style">
            The style object that contains the original data.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.#ctor(Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo"/> class. 
            </summary>
            <param name="store">
            A <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore"/> that holds data for this
                <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo"/>.
                All changes in this style object will be saved in the
                <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo"/> class. 
            </summary>
            <param name="identity">
            The identity.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo"/> class. 
            </summary>
            <param name="identity">
            The identity.
            </param>
            <param name="store">
            A <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore"/> that holds data for this
                <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo"/>.
                All changes in this style object will be saved in the
                <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.GetDefaultStyle">
            <summary>
            Gets the default style value of the <see cref="!:Syncfusion.WinForms.Input.ComboBoxEditorStyleInfo"/> class.
            </summary>
            <returns>Returns the default style value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.ShouldSerializeGripperBackColor">
            <summary>
                Determines whether Font has been modified and its contents should be serialized at design-time.
            </summary>
            <returns>True if contents were changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.ShouldSerializeGripperForeColor">
            <summary>
                Determines whether Fore Color has been modified and its contents should be serialized at design-time.
            </summary>
            <returns>True if contents were changed; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.Default">
            <summary>
            Gets the default DropDownStyleInfo value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.GripperForeColor">
            <summary>
            Gets or sets the fore color of textbox
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.BorderColor">
            <summary>
            Gets or sets the BorderColor of dropdown.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfo.GripperBackColor">
            <summary>
            Gets or sets the back color of the textbox
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore">
            <summary>
                Represents the class holds the plain data for a style object excluding identity information.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.GripperBackColorProperty">
            <summary>
                Provides information about the <see cref="!:Syncfusion.WinForms.DataGrid.Styles.CellStyleInfo.BackColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.GripperForeColorProperty">
            <summary>
                Provides information about the <see cref="!:Syncfusion.WinForms.DataGrid.Styles.CellStyleInfo.HoverBackColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.BorderColorProperty">
            <summary>
                Provides information about the SfComboBox dropdown border color property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.sd">
            <summary>
                Maintains the static data.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore"/> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore"/> class.
            </summary>
            <param name="info">Populates the SerializationInfo store with the name, type, and value of each piece of information it wants to serialize</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.Clone">
            <summary>
                Creates a copy of the current object.
            </summary>
            <returns>A duplicate of the current object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.GetStaticData">
            <summary>
            Initializes the <see cref="!:Syncfusion.WinForms.DataGrid.Styles.CellStyleInfoStore.sd"/>, if<see cref="F:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.sd"/> is null.
            </summary>
            <returns><see cref="!:Syncfusion.WinForms.DataGrid.Styles.CellStyleInfoStore.sd"/></returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.DropDownStyleInfoStore.StaticDataStore">
            <summary>
                Overridden to get the static data source.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Popup">
            <summary>
            Modified PopupControlContainer that takes a child control and
            adds a sizable grip so that the window can be sized.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Popup.showGripper">
            <summary>
            Initializes the container control.
            </summary>       
        </member>
        <member name="F:Syncfusion.WinForms.Core.Popup.childControl">
            <summary>
            The child control that is to be embedded.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Popup.isResizing">
            <summary>
            The boolean value indicates the currently the window is resizing.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Popup.showButtons">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Popup.fitToChildSize">
            <summary>
            Indicates whether size is dependant of child control size.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.Popup"/> class.
            </summary>
            <param name="childControl">The child control</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.Show(System.Drawing.Point)">
            <summary>
            Displays the popup control.
            </summary>
            <param name="location">The location at which the popup's left top position will appear.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.ConfirmDeactivate">
            <summary>
            Confirm while deactivate.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.AdjustPopupHostBounds">
            <summary>
            Adjusts bounds of the popupHost.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.Dispose(System.Boolean)">
            <summary>
            Disposing the elements.
            </summary>
            <param name="disposing">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override the paint.
            </summary>
            <param name="e">The paint event arguments</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.CreatePopupHost">
            <summary>
            Create the popup host.
            </summary>
            <returns>Returns the sizable popup host.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when mouse down.
            </summary>
            <param name="e">A mouse event arguments</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.OnMouseLeave(System.EventArgs)">
            <summary>
            Occurs when mouse leave from the control.
            </summary>
            <param name="e">A event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs while moue moved.
            </summary>
            <param name="e">The mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when mouse up.
            </summary>
            <param name="e">The mouse event arguments</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.GetIsMirrored">
            <summary>
            Gets the right to left mode.
            </summary>
            <returns>Returns true if right to left mode enabled</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.OnContentPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Used to paint the content.
            </summary>
            <param name="sender">The source control.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Popup.DrawResizeGrip(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the resize gripper for the control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains event data.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Popup.ShowButtons">
            <summary>
            Gets or sets a value indicating whether the button can show or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Popup.ShowGripper">
            <summary>
            Gets or sets a value indicating whether the gripper can show or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Popup.ScaleFactor">
            <summary>
            Gets a value for the dpi factor
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Popup.FitToChildControlSize">
            <summary>
            Gets or sets a value indicating whether size is dependant of child control size.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Popup.ChildControl">
            <summary>
            Gets the child control
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Popup.BottomGripBounds">
            <summary>
            Gets the bottom area of the resizing cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Popup.BottomRightGripBounds">
            <summary>
            Gets the bottom right area of the resizing cursor.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.PopupHost">
            <summary>
            Derives from the PopupHost class and adds a gripper label and
            makes the form sizable.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.MinBoundsWidth">
            <summary>
            The minimum bounds width.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.MinBoundsHeight">
            <summary>
            The minimum bounds height.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.OffsetY">
            <summary>
            Used when ShowGripper or ShowCloseButton property is set to true;
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.currentSize">
            <summary>
            The current size - used when resizing.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.isResizing">
            <summary>
            Indicates whether the window is being resized.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.showButtons">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.hostRect">
            <summary>
            The host rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.PopupHost.showGripper">
            <summary>
            Indicates whether to show gripper.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.PopupHost"/> class.
            </summary>
            <param name="childControl">The child control</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.HidePopup">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.HandleGripperMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event of the gripper label.
            </summary>
            <param name="sender">The gripper label.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.HandleGripperMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseUp event of the gripper label.
            </summary>
            <param name="sender">The gripper label.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.ProcessGripperDragRelease(System.Boolean)">
            <summary>
            Process the resizing release operation.
            </summary>
            <param name="isCanceled">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.HandleGripperMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handler for the MouseMove event of the gripper label.
            </summary>
            <param name="sender">The gripper label.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources.
            </summary>
            <param name="disposing">The boolean value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.ComputeSize">
            <summary>
            Overrides PopupHost.ComputeMySize.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.PopupHost.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Sets the bounds.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="width">The width</param>
            <param name="height">The height.</param>
            <param name="specified">The boolean value.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHost.ShowGripper">
            <summary>
            Gets or sets a value indicating whether a gripper will be shown that can used for resizing
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.PopupHost.ShowButtons">
            <summary>
            Gets or sets a value indicating whether the button can disable or not.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject">
            <summary>
            Represents the class that provides the accessibility object for the SfButton.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject.sfButton">
            <summary>
            Specifies the accessibility control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject.#ctor(Syncfusion.WinForms.Controls.SfButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject"/> class.
            </summary>
            <param name="sfButton">The SfButton which needs to create the accessibility object.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject.Role">
            <summary>
            Gets the AccessibleRole of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject.Name">
            <summary>
            Gets the AccessibleName of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject.Parent">
            <summary>
            Gets the accessibility object of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> parent.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject.Description">
            <summary>
            Gets the AccessibleDescription of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ButtonAccessibilityObject.Bounds">
            <summary>
            Gets the bounds of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:Syncfusion.WinForms.Core.SfScrollControl.StartAutoScrolling"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.ScrollWindowEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.WindowScrolling"/> and <see cref="!:Syncfusion.WinForms.Core.SfScrollControl.WindowScrolled"/> events.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="!:Syncfusion.WinForms.Controls.ScrollWindowEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:Syncfusion.WinForms.Controls.ScrollBarBase.ContexMnueShowing"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventHandler">
            <summary>
            Handles the DragScroll event of an IntelliMouseDragScroll object.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">The <see cref="T:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs"/> class.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs">
            <summary>
            Provides data for the <see cref="!:Syncfusion.WinForms.Controls.SfScrollControl.StartAutoScrolling"/> event.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs.reason">
            <summary>
            Specifies the reason for the auto scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs.direction">
            <summary>
            Specifies the direction of the auto scrolling.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs.#ctor(Syncfusion.WinForms.Controls.Enums.AutoScrollReason,Syncfusion.WinForms.Controls.Enums.AutoScrollOrientation)">
            <summary>Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs"/> class.</summary>
            <param name="reason">The reason for scrolling.</param>
            <param name="direction">The direction of the auto scrolling.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs.Reason">
            <summary>
            Gets the reason for performing the auto scrolling, either scrollbar acceleration or mouse dragging outside window bounds.
            </summary>		
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs.Direction">
            <summary>
            Gets the scrollbars that need to be perform the auto scroll.
            </summary>		
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs">
            <summary>
            Provides the data for the <see cref="!:Syncfusion.WinForms.Core.SfScrollControl.WindowScrolling"/> and <see cref="!:Syncfusion.WinForms.Core.SfScrollControl.WindowScrolled"/> events.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.xAmount">
            <summary>
            The horizontal scroll amount.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.yAmount">
            <summary>
            The vertical scroll amount.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.rect">
            <summary>
            Holds the rectangle that need to be scrolled.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.clipRect">
            <summary>
            Holds the rectangle that need to be clipped while scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.updateRect">
            <summary>
            Specifies the updated rectangle after the scrolling.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs"/> class.
            </summary>
            <param name="xAmount">The horizontal scroll distance in pixel.</param>
            <param name="yAmount">The vertical scroll distance in pixel.</param>
            <param name="rect">The bounds of the rectangle that is scrolled.</param>
            <param name="clipRect">Clipping rectangle.</param>
            <param name="updateRect">The rectangle that was scrolled into view.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.XAmount">
            <summary>
            Gets the horizontal scroll distance in pixels.
            </summary>		
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.YAmount">
            <summary>
            Gets the vertical scroll distance in pixels.
            </summary>		
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.Rect">
            <summary>
            Gets the bounds of the rectangle that is scrolled.
            </summary>		
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.ClipRect">
            <summary>
            Gets the clipped rectangle.
            </summary>		
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs.UpdateRect">
            <summary>
            Gets the rectangle that need to be updated.        
            </summary>		
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs">
            <summary>
            Provides data about the cancel-able <see cref="!:Syncfusion.WinForms.Controls.ScrollBarBase.ContexMenuShowing"/> event.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs.point">
            <summary>
            Specifies the point that needs to be show the context menu.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs.contextMenu">
            <summary>
            The context menu strip.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs.#ctor(System.Drawing.Point,System.Windows.Forms.ContextMenuStrip)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs"/> class.
            </summary>
            <param name="point">The mouse location in screen coordinates.</param>
            <param name="contextMenu">The context menu strip that needs to be show on the given point.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs.Point">
            <summary>
            Gets the screen coordinates of the mouse cursor.
            </summary>		
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs.ContextMenu">
            <summary>
            Gets or sets the context menu strip that need to be displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs">
            <summary>
            Provides data for the DragScroll event of an IntelliMouseDragScroll object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs.dx">
            <summary>
            The value of the horizontal co-ordinate.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs.dy">
            <summary>
            The value of the vertical co-ordinate.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs"/> class.
            </summary>
            <param name="dx">The distance in pixels the mouse pointer has been moved horizontally.</param>
            <param name="dy">The distance in pixels the mouse pointer has been moved vertically.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs.DX">
            <summary>
            Gets or sets the distance in pixels the mouse pointer has been moved horizontally.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs.DY">
            <summary>
            Gets or sets the distance in pixels the mouse pointer has been moved vertically.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.IDragDispatcher">
            <summary>
            Interface for implementing by parent control for supporting Drag operation.
            Methods of this interface invoke corresponding drag methods of parent control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.IDragDispatcher.DispatchDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Dispatch the message for DragOver.
            </summary>
            <param name="drgevent">The <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.IDragDispatcher.DispatchOnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Dispatches the message for DragDrop.
            </summary>
            <param name="drgevent">The <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.IDragDispatcher.DispatchOnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Dispatches the message for DragEnter.
            </summary>
            <param name="drgevent">The <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.IDragDispatcher.DispatchOnDragLeave(System.EventArgs)">
            <summary>
            Dispatches the message for DragLeave.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.IDragDispatcher.DispatchOnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Dispatches the message for QueryContinueDrag.
            </summary>
            <param name="args">The <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.IDragDispatcher.DispatchOnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Dispatches the message for GiveFeedback.
            </summary>
            <param name="args">The <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.IDragDispatcher.DispatchDoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
            Provides the drag drop effects.
            </summary>
            <param name="data">The data that need to be dragged.</param>
            <param name="allowedEffects">The drag drop effects.</param>
            <returns>Returns the DragDropEffects.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.DragHelper">
            <summary>
            Represents the class that used to show the bitmap while dragging the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.DragHelper.dragBitmap">
            <summary>
            Holds the bitmap that needs to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.DragHelper.isDragging">
            <summary>
            Specifies whether the dragging is in process or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.DragHelper.origin">
            <summary>
            Specifies the origin of the bitmap.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.DragHelper.overrideCursor">
            <summary>
            Holds the cursor that needs to be set for the control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.DragHelper.parent">
            <summary>
            Specifies the methods for implementing by parent control for supporting Drag operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.DragHelper.shiftCalculated">
            <summary>
            Specifies whether the shift is calculated or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.DragHelper.keepOrigin">
            <summary>
            The point that needs to be tracked for the dragging.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.DragHelper"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.ShowWindowTopMost">
            <summary>
            Displays the drag window as the topmost window.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnSetCursor(System.Windows.Forms.Message@)">
            <summary>
            Sets the current display cursor.
            </summary>
            <param name="m">The windows process message.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.StartDrag(System.Drawing.Point)">
            <summary>
            Starts the Dragging of window.
            </summary>
            <param name="p">The mouse point.</param>
            <returns>Return false, when the background image is null otherwise return true.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.StopDrag">
            <summary>
            Stops the dragging of window.
            </summary>
            <returns>If the window is in dragging it will return true, otherwise return false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides the WndProc method for setting the drag cursor.
            </summary>
            <param name="msg">The windows message.</param>        
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Changes the windows background as the transparent.
            </summary>
            <param name="e">The <see cref="T:System.Drawing.PaintEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Occurs while dragging is done over the window.
            </summary>
            <param name="e">The <see cref="T:System.Window.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Occurs while dropping the window.
            </summary>
            <param name="e">The <see cref="T:System.Window.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Occurs while entering the drag window.
            </summary>
            <param name="drgevent">An <see cref="T:System.Window.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnDragLeave(System.EventArgs)">
            <summary>
            Occurs while mouse leaves the drag window.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Occurs while continue the dragging.
            </summary>
            <param name="qcdevent">The <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Occurs while showing the feed back about the dragging.
            </summary>
            <param name="gfbevent">The <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.InitializeComponent">
            <summary>
            Initialize the components of the <see cref="T:Syncfusion.WinForms.Controls.DragHelper"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
            Handles the Window message for SETCURSOR.
            </summary>
            <param name="m">The window message.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.DragHelper.MoveWindow(System.Drawing.Point)">
            <summary>
            Moves the cursor to the specific point.
            </summary>
            <param name="p">The point to move the cursor.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.DragHelper.DragBitmap">
            <summary>
            Gets or sets the bitmap image for the DragDrop.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.DragHelper.WindowCursor">
            <summary>
            Gets or sets the window cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.DragHelper.DragParent">
            <summary>
            Gets or sets the parent control supporting drag operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.DragHelper.CreateParams">
            <summary>
            Overrides the CreateParams. 
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ReaderModeScrollController">
            <summary>
            Implements support for reader mode scrolling. When the user presses the middle mouse button and drags the mouse,
            the window will scroll. <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> has built-in support for this call. 
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.NonFinalizeDisposable">
            <summary>
            Provides the base class for Disposable object. 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.NonFinalizeDisposable.Dispose">
            <summary>
            Releases all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.NonFinalizeDisposable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="T:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.ManifestPrefix">
            <summary>
            Specifies the manifest for retrieving the resources.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.ClickHoldTicks">
            <summary>
            Specifies the default click hold ticks for scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.dragWindow">
            <summary>
            The drag window that used to show the bitmap for the reader mode scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.activeImm">
            <summary>
            The reader mode scroll controller.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.startStopSemaphor">
            <summary>
            The semaphore for the dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.parent">
            <summary>
            The parent control of the controller.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.bitmapRect">
            <summary>
            Specifies the rectangle region of the bitmap.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.startPoint">
            <summary>
            The start point of the scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.downMouseTick">
            <summary>
            Specifies the timer count for the mouse down.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.timerCount">
            <summary>
            The timer count of the reader mode scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.vertical">
            <summary>
            Specifies whether to perform the vertical scrolling or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.horizontal">
            <summary>
            Specifies whether the perform the horizontal scrolling or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.clickHold">
            <summary>
            Specifies whether the mouse click is remain hold or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.enabled">
            <summary>
            Specifies whether the  Reader mode scrolling is enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.wireMouseDownMessage">
            <summary>
            Specifies whether the dragging is started by using the parent controls mouse down or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ReaderModeScrollController.repeatScrollEventTimer">
            <summary>
            The timer for the reader mode scrolling.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ReaderModeScrollController"/> class.
            </summary>
            <param name="control">The control to add this functionality to.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ReaderModeScrollController"/> class.
            </summary>
            <param name="control">The control to add this functionality to.</param>
            <param name="wireMouseDown">True if <see cref="T:Syncfusion.WinForms.Controls.ReaderModeScrollController"/> should listen for MouseDown event; 
            False if dragging should be started manually by calling StartDrag.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.GetBitmap(System.String)">
            <summary>
            Returns the bitmap from manifest. 
            </summary>
            <param name="bitmapName">The bitmap image name.</param>
            <returns>Returns the bitmap.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.StartDrag(System.Drawing.Point)">
            <summary>
            Starts the IntelliSence mouse dragging at the given screen coordinates.
            </summary>
            <param name="startPoint">The screen coordinates.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.StopDrag">
            <summary>
            Stops the IntelliSence-Mouse dragging.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.Dispose(System.Boolean)">
            <summary>
            Disposes the unused resources.
            </summary>
            <param name="dispose">Specifies whether to dispose both managed and unmanaged resources or only the unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.WireControl">
            <summary>
            Wire the mouse events for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.UnwireControl">
            <summary>
            Unwire the mouse events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.ControlMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when mouse down is performed on the control.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/>  that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.ControlMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when mouse up is performed over the control.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.ControlClick(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse click is performed.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.SetCursor(System.Windows.Forms.Control,System.Windows.Forms.Cursor)">
            <summary>
            Sets the cursor for the given control.
            </summary>
            <param name="control">The control that need to be override the given cursor.</param>
            <param name="cursor">The cursor that need to be set for the control.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.CheckAction">
            <summary>
            Checks the Action of the mouse controller.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.RaiseIntelliSenseMouseDragScroll(System.Int32@,System.Int32@)">
            <summary>
            Raise the <see cref="E:Syncfusion.WinForms.Controls.ReaderModeScrollController.DragScroll"/> event.
            </summary>
            <param name="dx">The x location of the mouse.</param>
            <param name="dy">the y location of the mouse.</param>
            <returns>Returns false when the ea.Cancel is set to true other wise return true.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.StartTimer">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.SlowTimer">
            <summary>
            Slows the timer.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.StopTimer">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ReaderModeScrollController.OnTimerElapsed(System.Object,System.EventArgs)">
            <summary>
            Occurs while the timer is elapsed.
            </summary>
            <param name="source">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.ReaderModeScrollController.DragScroll">
            <summary>
            Occurs when the user has dragged the mouse outside the scrolling bitmap.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ReaderModeScrollController.DragWindow">
            <summary>
            Gets the DragWindow.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ReaderModeScrollController.ActiveReaderModeScrollController">
            <summary>
            Gets the active <see cref="T:Syncfusion.WinForms.Controls.ReaderModeScrollController"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ReaderModeScrollController.AllowScrolling">
            <summary>
            Gets or sets the scrolling direction.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ReaderModeScrollController.IsDragging">
            <summary>
            Gets a value indicating whether the user is dragging.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ReaderModeScrollController.Cursor">
            <summary>
            Gets the cursor to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ReaderModeScrollController.Enabled">
            <summary>
            Gets or sets a value indicating whether the Reader mode scrolling feature is enabled or not.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject">
            <summary>
            Represents the class that provides the accessibility object for the SfScrollBar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.scrollBar">
            <summary>
            Specifies the scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.#ctor(Syncfusion.WinForms.Controls.ScrollBarBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject"/> class.
            </summary>
            <param name="scrollBar">The ScrollBarBase.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.GetChildCount">
            <summary>
            Overridden to get the child count of the scrollbar.
            </summary>
            <returns>Returns the child count of the scrollbar.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.GetChild(System.Int32)">
            <summary>
            Overridden to get the child at the given index.
            </summary>
            <param name="index">The index of the child.</param>
            <returns>Returns the accessibility object of the child.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.GetScrollBarAccessibilityObject(System.Int32)">
            <summary>
            Gets the accessibility object for the given index.
            </summary>
            <param name="index">The index of the child control.</param>
            <returns>Returns the accessibility object of the child control.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.Role">
            <summary>
            Gets the AccessibleRole of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.Name">
            <summary>
            Gets the AccessibleName of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.Parent">
            <summary>
            Gets the accessibility object of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> parent.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.Description">
            <summary>
            Gets the AccessibleDescription of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibilityObject.Bounds">
            <summary>
            Gets the bounds of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject">
            <summary>
            Represents the class that provides the accessibility object of the Scrollbar components.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject.scrollbar">
            <summary>
            Specifies the parent control of the accessibility object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject.region">
            <summary>
            Specifies the region of the scrollbar component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject.#ctor(Syncfusion.WinForms.Controls.ScrollBarBase,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject"/> class.
            </summary>
            <param name="scrollbar">The parent control.</param>
            <param name="region">The region of the scrollbar component.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject.Name">
            <summary>
            Gets the AccessibleName of the Scrollbar component.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject.Role">
            <summary>
            Gets the AccessibleRole of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> component.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject.Bounds">
            <summary>
            Gets the bounds of the scrollbar component.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollBarAccessibileObject.Parent">
            <summary>
            Gets the accessibility object of the parent control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject">
            <summary>
            Represents a class that provides the accessibility object for the SfScrollControl.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.sfScrollControl">
            <summary>
            Specifies the SfScrollControl.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.#ctor(Syncfusion.WinForms.Controls.SfScrollControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject"/> class.
            </summary>
            <param name="sfScrollControl">The SfScrollControl.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.GetChildCount">
            <summary>
            Overridden to get the child count of the SfScrollFrame.
            </summary>
            <returns>Returns the child count of the scrollbar.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.GetChild(System.Int32)">
            <summary>
            Overridden to get the child at the given index.
            </summary>
            <param name="index">The index of the child.</param>
            <returns>Returns the accessibility object of the child.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.Role">
            <summary>
            Gets the AccessibleRole of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.Name">
            <summary>
            Gets the AccessibleName of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.Parent">
            <summary>
            Gets the accessibility object of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> parent.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.Description">
            <summary>
            Gets the AccessibleDescription of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Accessibility.ScrollControlAccessibilityObject.Bounds">
            <summary>
            Gets the bounds of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ScrollCursors">
            <summary>
            Provides the cursors for the intelliSence mouse drag scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollCursors.assemblyNameSpace">
            <summary>
            Specifies the assembly name space for retrieving the values from the resource.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollCursors.dragWheelAllCursor">
            <summary>
            Holds the cursor that used indicate the dragging in all direction.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollCursors.dragWheelSouthCursor">
            <summary>
            Holds the cursor that used indicate the dragging in south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollCursors.dragWheelNorthCursor">
            <summary>
            Holds the cursor that used indicate the dragging in north direction.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollCursors.dragWheelWestCursor">
            <summary>
            Holds the cursor that used indicate the dragging in west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollCursors.dragWheelEastCursor">
            <summary>
            Holds the cursor that used indicate the dragging in east direction.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollCursors.GetCursor(System.String)">
            <summary>
            Gets the scroll cursor.
            </summary>
            <param name="cursorName">The name of the cursor.</param>
            <returns>Returns the cursor.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollCursors.DragWheelAllCursor">
            <summary>
            Gets the cursor for mouse wheel at all direction.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollCursors.DragWheelSouthCursor">
            <summary>
            Gets the cursor for drag wheel at south direction.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollCursors.DragWheelNorthCursor">
            <summary>
            Gets the cursor for drag wheel at North direction.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollCursors.DragWheelWestCursor">
            <summary>
            Gets the cursor for drag wheel at west direction.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollCursors.DragWheelEastCursor">
            <summary>
            Gets the cursor for drag wheel at east direction.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.HorizontalScrollBar">
            <summary>
            Represents a class that is used to draw the horizontal scrollbar of the scroll control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ScrollBarBase">
            <summary>
            Represents a base class that is used to draw the Horizontal and Vertical scrollbars of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.timerDelegate">
            <summary>
            The timer delegate.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.largeChange">
            <summary>
            The large change of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.previousLargeChange">
            <summary>
            Holds the previous large change value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.maximum">
            <summary>
            The maximum value of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.minimum">
            <summary>
            The minimum value of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.smallChange">
            <summary>
            The small change of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.scrollBarValue">
            <summary>
            The value of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.scrollBarRects">
            <summary>
            Holds the rectangle regions for the scrollbar elements.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.enableThumb">
            <summary>
            Specifies whether the thumb is enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.enableMinimumArrow">
            <summary>
            Specifies whether the minimum arrow is enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.enableMaximumArrow">
            <summary>
            Specifies whether the maximum arrow is enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.updateStates">
            <summary>
            Specifies whether the scrollbar state is needs to be update or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.horizontal">
            <summary>
            Specifies whether the scrollbar is horizontal or vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.timer">
            <summary>
            The timer for the repeat scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.pressedRegion">
            <summary>
            The pressed region of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.selectedRegion">
            <summary>
            The selected region of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.movedRegion">
            <summary>
            The moved region of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.style">
            <summary>
            The style info of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.contextMenu">
            <summary>
            The context menu strip that needs to be showed while right clicking on the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollBarBase.mouseLocation">
            <summary>
            Holds the current mouse location.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.#ctor(System.Windows.Forms.ScrollBars,Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> class.
            </summary> 
            <param name="type">The type of the scrollbar.</param>
            <param name="style">The <see cref="!:Syncfusion.WinForms.Controls.ScrollBarStyleInfo"/> of the scroll bar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.DropHandle">
            <summary>
            Destroys the handle associated with the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.RaiseMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raise the MouseDown event
            </summary>
            <param name="args">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains  data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.RaiseMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to raise the MouseMove event.
            </summary>
            <param name="args">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> contains event data</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.RaiseMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to raise the MouseUp event
            </summary>
            <param name="args">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.SendScrollMessage(System.Windows.Forms.ScrollEventType)">
            <summary>
            Sends or emulates a	scroll event.
            </summary>
            <param name="et">The <see cref="T:System.Windows.Forms.ScrollEventType"/>.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.InvalidateScrollBar">
            <summary>
            Recalculates the bounds of the scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.GetStyle">
            <summary>
            Gets the style of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/>.
            </summary>
            <returns>Returns the ScrollBar style.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.IsRightToLeft">
            <summary>
            Gets a value indicating whether RightToLeft mode is enabled or not for scrollbar.
            </summary>
            <returns>Returns true when the RTL is enabled otherwise return false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources.
            </summary>
            <param name="disposing">Specifies whether to dispose the managed and unmanaged resources or only the unmanaged resource.</param>>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Recalculates the scrollbar regions when performs the layout.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.LayoutEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.CreateAccessibilityInstance">
            <summary>
            Overridden to update the accessibility object of the SfScrollBar.
            </summary>
            <returns>Returns the accessibility object of the SfScrollBar.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the Scrollbar components based on the <see cref="P:Syncfusion.WinForms.Controls.ScrollBarBase.Style"/> value.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.DrawArrow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState,Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo)">
            <summary>
            Draws the arrow for the scrollbar button.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> that used to draw the arrow..</param>
            <param name="rect">The bounds of the arrow.</param>
            <param name="type">The scroll button type.</param>
            <param name="state">The scroll button state.</param>
            <param name="style">The Style of the scrollbar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.DrawScrollBarBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo)">
            <summary>Draws the background for the scrollbar.</summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="bounds">The bounds of the scrollbar.</param>
            <param name="state">The state of the scrollbar.</param>
            <param name="style">The Style of the scrollbar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.DrawThumbBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo)">
            <summary>Draws the background for the scrollbar Thumb.</summary>
            <param name="g">The <see cref="T:System.Graphics"/> object.</param>
            <param name="rect">The bounds of the scroll button.</param>
            <param name="state">The state of the scroll button.</param>
            <param name="style">The Style of the scrollbar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="T:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.ScrollBarBase.ValueChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="T:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Redraws the scroll control when RightToLeft is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Performs the scrolling on the <see cref="T:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="T:System.Windows.Forms.Control.MouseEnter"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="T:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="T:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnThumbPositionChanged(System.Int32,System.Int32)">
            <summary>
            Occurs when the scrollbar thumb is dragged.
            </summary>
            <param name="x">The X co-ordinates.</param>
            <param name="y">The Y co-ordinates.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.GetMinButton">
            <summary>
            Gets min button. 
            </summary>
            <returns>Returns the min scroll button.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.GetMaxButton">
            <summary>
            Gets max button. 
            </summary>
            <returns>Returns the max scroll button.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.InvalidateArrowRegion">
            <summary>
            Invalidates the bounds of the arrow buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.InvalidateThumbRegion">
            <summary>
            Invalidates the bounds of the thumb region.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.CalculateThumbDelta(System.Int32,System.Int32)">
            <summary>
            Used for calculating thumb offset.
            </summary>
            <param name="x">The X co-ordinate.</param>
            <param name="y">The Y co-ordinate.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.PointToValue(System.Int32,System.Int32)">
            <summary>Gets the value of the scrollbar at the given point.</summary>
            <param name="x">The X co-ordinate.</param>
            <param name="y">The Y co-ordinate.</param>
            <returns>Returns the value of the scrollbar.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raise the Scroll event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnScrollHereClick(System.Object,System.EventArgs)">
            <summary>
            Raises the mouse click on the scrollbar.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnMinimumClick(System.Object,System.EventArgs)">
            <summary>
            Raises the Scroll event when the mouse click on minimum thumb region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnMaximumClick(System.Object,System.EventArgs)">
            <summary>
            Raises the Scroll event when mouse click on maximum thumb region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnPageUpLeftClick(System.Object,System.EventArgs)">
            <summary>
            Raises the Scroll event when the mouse click on top left thumb region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnPageDownRightClick(System.Object,System.EventArgs)">
            <summary>
            Raises the Scroll event mouse click on bottom right thumb region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnScrollUpLeftClick(System.Object,System.EventArgs)">
            <summary>
            Raises Scroll event when the mouse click on top left thumb region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnScrollDownRightClick(System.Object,System.EventArgs)">
            <summary>
            Raises the Scroll event when the mouse click on down left thumb region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.InitializeContextMenu(System.Windows.Forms.ContextMenuStrip)">
            <summary>
            Initialize the context menu strip for the scrollbar.
            </summary>
            <param name="contextMenuStrip">The context menu strip that need to be displayed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.DisplayContextMenu(Syncfusion.WinForms.Controls.ScrollBarBase)">
            <summary>
            Creates and displays the context menu for the control.
            </summary>
            <param name="scrollBar">The <see cref="!:CustomScrollBar"/> control.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnShowContextMenu(System.Object,Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.ScrollBarBase.ContextMenuShowing"/> event.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">The <see cref="T:Syncfusion.WinForms.Controls.Events.ContextMenuShowingEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.OnTimerTick(System.Object)">
            <summary>
            Occurs when the time tick is performed.
            </summary>
            <param name="sender">The object of the sender.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.PerformAutoScroll(Syncfusion.WinForms.Controls.Enums.ScrollBarRegion)">
            <summary>
            Performs the scrolling based on the moved region.
            </summary>
            <param name="movedRegion">The region of the scrollbar that needs to be scrolled.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.PerformThumbMinRegionClick(System.Object,System.EventArgs)">
            <summary>
            Performs the mouse click on left thumb region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.PerformThumbMaxRegionClick(System.Object,System.EventArgs)">
            <summary>
            Performs the mouse click on max region.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.PerformMinButtonClick(System.Object,System.EventArgs)">
            <summary>
            Performs the mouse click on min button.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.PerformMaxButtonClick(System.Object,System.EventArgs)">
            <summary>
            Performs the mouse click on max button.
            </summary>
            <param name="sender">The object of the sender</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.DefineMovedRegion(System.Drawing.Point)">
            <summary>
            Defines the moved position of the cursor.
            </summary>
            <param name="p">The point which need to be in the moved region.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.DefineMovedRegion(System.Int32,System.Int32)">
            <summary>
            Defines the moved position of the cursor.
            </summary>
            <param name="x">X coordinate of mouse.</param>
            <param name="y">Y coordinate of mouse.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.SetInnerValue(System.Int32)">
            <summary>
            Sets value without raising the ValueChanged event. 
            </summary>
            <param name="value">The value that need to be set for the scrollbar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.HitTest(System.Int32,System.Int32)">
            <summary>
            Defines pressed region.
            </summary>
            <param name="x">The X co-ordinate.</param>
            <param name="y">The Y co-ordinate.</param>
            <returns>Returns the pressed region.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollBarBase.PerformScroll(System.Windows.Forms.MouseEventArgs,Syncfusion.WinForms.Controls.Enums.ScrollBarRegion)">
            <summary>
            Updates the scrollbar value based on the given ScrollBarRegion.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
            <param name="pressedRegion">The <see cref="!:Syncfusion.WinForms.Controls.ScrollBarRegion"/> in which the mouse down is occurs.</param>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.ScrollBarBase.ValueChanged">
            <summary>
            Occurs when the Value property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.ScrollBarBase.Scroll">
            <summary>
            Occurs when the scrolling is performed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.ScrollBarBase.ContextMenuShowing">
            <summary>
            Occurs when the context menu is showing for the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the <see cref="P:Syncfusion.WinForms.Controls.ScrollBarBase.Value"/>
            property when the scroll box is moved a large distance.
            </summary>
            <remarks>
            When the user clicks the scroll bar, Maximum button or minimum button, the <see cref="P:Syncfusion.WinForms.Controls.ScrollBarBase.Value"/> property changes according to the value set in the <see cref="P:Syncfusion.WinForms.Controls.ScrollBarBase.LargeChange"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.SmallChange">
            <summary>
            Gets or sets a value to be added or subtracted from the Value 
            property when the scroll box is moved a small distance.
            </summary>
            <remarks>
            When the user clicks the scroll bar, Maximum button or minimum button , the <see cref="P:Syncfusion.WinForms.Controls.ScrollBarBase.Value"/> property changes according to the value set in the <see cref="P:Syncfusion.WinForms.Controls.ScrollBarBase.SmallChange"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the
            scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.EnableThumb">
            <summary>
            Gets or sets a value indicating whether the scroll bar thumb can be enabled or not.
            Default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.EnableMinimumArrow">
            <summary>
            Gets or sets a value indicating whether minimum arrow can be enabled or not.
            Default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.EnableMaximumArrow">
            <summary>
            Gets or sets a value indicating whether maximum arrow can be enabled or not.
            Default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.Style">
            <summary>
            Gets or sets the <see cref="!:Syncfusion.WinForms.Controls.ScrollBarStyleInfo"/> with settings that control the appearance of the scroll bar.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.AccessibilityEnabled">
            <summary>
            Gets or sets a value indicating whether the accessibility is enabled for the control or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.Orientation">
            <summary>
            Gets the orientation of the scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.MouseLocation">
            <summary>
            Gets the current mouse location.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.ScrollBarRects">
            <summary>
            Gets the rectangle regions of the scrollbar elements.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollBarBase.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> value for the control. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.HorizontalScrollBar.DefaultThumbWidth">
            <summary>
            Specifies the default thumb width.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.HorizontalScrollBar.deltaX">
            <summary>
            Specifies the location of the mouse click on the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.HorizontalScrollBar.defaultSize">
            <summary>
            The default size of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.HorizontalScrollBar.sfScrollControl">
            <summary>
            The attached SfScrollControl;
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.HorizontalScrollBar"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.#ctor(Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.HorizontalScrollBar"/> class.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> for the horizontal scrollbar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.#ctor(Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo,Syncfusion.WinForms.Controls.SfScrollControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.HorizontalScrollBar"/> class.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> for the horizontal scrollbar.</param>
            <param name="control">Instance of the SfScrollControl.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.GetStyle">
            <summary>
            Gets the style of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/>
            </summary>
            <returns>Returns the ScrollControl' horizontal scrollbar style.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.PointToValue(System.Int32,System.Int32)">
            <summary>
            Gets value by cursor position.
            </summary>
            <param name="x">The x position of the scrollbar. </param>
            <param name="y">The y position of the scrollbar.</param>
            <returns>Returns the value of the given point.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.InvalidateArrowRegion">
            <summary>
            Recalculates the arrow positions of the scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.InvalidateThumbRegion">
            <summary>
            Recalculates the thumb positions of the scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.GetMaxButton">
            <summary>
            Gets the maximum button.
            </summary>
            <returns>Returns the maximum scroll button.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.GetMinButton">
            <summary>
            Gets the Minimum scroll button.
            </summary>
            <returns>Returns the minimum scroll button.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.OnThumbPositionChanged(System.Int32,System.Int32)">
            <summary>Occurs while moving the mouse position on the scrollbar.</summary>
            <param name="x">The location of the x co-ordinate.</param>
            <param name="y">The location of the y co-ordinate.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.CalculateThumbDelta(System.Int32,System.Int32)">
            <summary>Calculates the delta value of x.</summary>
            <param name="x">The x position of the mouse cursor.</param>
            <param name="y">The y position of the mouse cursor.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.OnScrollHereClick(System.Object,System.EventArgs)">
            <summary>
            Occurs while clicking the ScrollHere menu item.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.OnPageDownRightClick(System.Object,System.EventArgs)">
            <summary>
            Occurs while clicking on the PageDown or Right menu items.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.OnPageUpLeftClick(System.Object,System.EventArgs)">
            <summary>
            Occurs while clicking the PageUp or Left menu items.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.CalculateArrowButtonLocation">
            <summary>
            Calculates the positions of the Arrow button.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.HorizontalScrollBar.CalculateThumbLeftAndRightRegion">
            <summary>
            Calculates the bounds for leftThumb and rightThumb region of the scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.HorizontalScrollBar.DefaultSize">
            <summary>
            Gets the default size of the horizontal scrollbar.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper">
            <summary>
            Provides a class that contains properties to get the localized string for the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> based on the current culture.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.ScrollHere">
            <summary>
            Gets the localized string for ScrollHere item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.ScrollUp">
            <summary>
            Gets the localized string for ScrollUp item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.ScrollDown">
            <summary>
            Gets the localized string for ScrollDown item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.PageUp">
            <summary>
            Gets the localized string for PageUp item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.PageDown">
            <summary>
            Gets the localized string for PageDown item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.Top">
            <summary>
            Gets the localized string for Top item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.Bottom">
            <summary>
            Gets the localized string for Bottom item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.ScrollLeft">
            <summary>
            Gets the localized string for ScrollLeft item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.ScrollRight">
            <summary>
            Gets the localized string for ScrollRight item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.PageLeft">
            <summary>
            Gets the localized string for PageLeft item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.PageRight">
            <summary>
            Gets the localized string for PageRight item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.LeftEdge">
            <summary>
            Gets the localized string for LeftEdge item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollControlResourceWrapper.RightEdge">
            <summary>
            Gets the localized string for RightEdge item of ScrollBar ContextMenu.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ScrollProperties">
            <summary>
            Represents a class that holds the properties of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollProperties.isAttached">
            <summary>
            Specifies whether the scrollbar is the attached scrollbar or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollProperties.scrollBar">
            <summary>
            The scrollbar base that needs to be wrapped.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollProperties.attachedSfScrollBar">
            <summary>
            Holds the custom attached scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollProperties.attachedScrollBar">
            <summary>
            Holds the attached system scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollProperties.#ctor(Syncfusion.WinForms.Controls.ScrollBarBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ScrollProperties"/> class.
            </summary>
            <param name="scrollBar">The scrollbar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollProperties.AttachScrollBar(System.Windows.Forms.Control)">
            <summary>
            Attach the scroll events of the given scrollbar to the scroll control.
            </summary>
            <param name="scrollBar">The scrollbar that need to be attached.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollProperties.DetachScrollBar">
            <summary>
            Remove the scroll events of the attached scrollbars.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollProperties.InitializeScrollBar">
            <summary>
            Initializes the values of the attached scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollProperties.OnInnerScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the ValueChanged event.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollProperties.OnInnerScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.ScrollProperties.Scroll"/> event of the scrollbar.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="se">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.ScrollProperties.ValueChanged">
            <summary>
            Occurs when the value property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.ScrollProperties.Scroll">
            <summary>
            Occurs when the scrolling is done on the scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollProperties.ScrollBar">
            <summary>
            Gets the reference to the scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollProperties.LargeChange">
            <summary>
            Gets or sets a value to	be added to	or subtracted from the value of the	property when the scroll box is	moved a large distance.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollProperties.Maximum">
            <summary>
            Gets or sets the upper limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollProperties.Minimum">
            <summary>
            Gets or sets a lower limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollProperties.SmallChange">
            <summary>
            Gets or sets the value to be added or subtracted from the Value property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollProperties.Value">
            <summary>
            Gets or sets the numeric value that represents the current position of the scroll	box	on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ScrollProperties.Enabled">
            <summary>
            Gets or sets a value indicating whether the scrollbar can be enabled.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.SfScrollControl">
            <summary>
            Represents a base class for the controls that supports scrolling.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.ISupportUpdate">
            <summary>
            Provides the functionalities for the control to have BeginUpdate and EndUpdate options.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ISupportUpdate.BeginUpdate">
            <summary>
            Suspends updating the component. An internal counter will be increased if called multiple times.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ISupportUpdate.EndUpdate">
            <summary>
            Resumes updating the component. If <see cref="M:Syncfusion.WinForms.Core.ISupportUpdate.BeginUpdate"/> was called multiple times, an internal counter is decreased.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.ISupportUpdate.IsUpdating">
            <summary>
            Gets a value indicating whether <see cref="M:Syncfusion.WinForms.Core.ISupportUpdate.BeginUpdate"/> was called.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.startstopSemaphor">
            <summary>
            Specifies the semaphore for the auto scroll timer.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.overrideCursor">
            <summary>
            Specifies the cursor that needs to set for the scroll control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.wiredParentForm">
            <summary>
            Specifies the parent form of the scroll control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.repeatScrollMessage">
            <summary>
            Specifies the repeat scroll timer message for the control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.autoScrollBounds">
            <summary>
            Specifies the auto scroll bounds of the control. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.autoScrollMode">
            <summary>
            Holds the default auto scrolling mode of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.autoScrollMargin">
            <summary>
            Specifies the auto scroll margin for the control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.repeatScrollEventTimer">
            <summary>
            Specifies the timer for the repeat scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.hScrollBar">
            <summary>
            Holds the horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.vScrollBar">
            <summary>
            Holds the vertical scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.readerModeScrollController">
            <summary>
            Holds the reader mode scroll controller.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.sizeBox">
            <summary>
            Specifies the size box that needs to be added to the scroll control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.updateCount">
            <summary>
            Holds the number of updates pending for the control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.lastMouseTick">
            <summary>
            holds the timer tick for the auto scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.gestureConfigSize">
            <summary>
            Holds the size of the GestureConfig.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.gestureInfoSize">
            <summary>
            Holds the size of the GestureInfo.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.verticalScrollValue">
            <summary>
            Holds the value of the vertical scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.horizontalScrollValue">
            <summary>
            Holds the value of the horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.vScrollIncrement">
            <summary>
            Specifies the value that needs to be incremented/decremented for vertical scrollbar using the mouse wheel.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.hScrollIncrement">
            <summary>
            Specifies the value that needs to be incremented/decremented for horizontal scrollbar using the mouse wheel.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.timerCount">
            <summary>
            Holds the timer count of the auto scroll timer.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.touchStartPoint">
            <summary>
            Holds the starting touch point of the scroll control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.horizontalScrollBarVisible">
            <summary>
            Holds the value that indicates whether the horizontal scrollbar can be visible.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.verticalScrollBarVisible">
            <summary>
            Holds the value that indicates whether the vertical scrollbar can be visible.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.disableAutoScroll">
            <summary>
            Holds the value that indicates whether the auto scrolling is needs to be disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.paintPending">
            <summary>
            Specifies whether the paint pending is available or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.isActiveControl">
            <summary>
            Specifies the value that indicates whether the scroll control is active or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.hasControlFocus">
            <summary>
            Holds a value that indicates whether the Scroll control has the focus or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.inOleDragOver">
            <summary>
            Specifies whether the control is currently in the DragOver state or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.inMouseDragScroll">
            <summary>
            Specifies whether the auto scrolling is currently in performing on the control or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.isTouchOverHScrollBar">
            <summary>
            Specifies whether the hovering is made on the horizontal scrollbar using the touch.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.isTouchOverVScrollBar">
            <summary>
            Specifies whether the hovering is made on the vertical scrollbar using the touch.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.scrollControlStyle">
            <summary>
            Holds the style info collection for the scroll control elements.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.horizontalScroll">
            <summary>
            Holds the wrapped properties of the horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.verticalScroll">
            <summary>
            Holds the wrapped properties of the vertical scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollControl.autoScrollInterval">
            <summary>
            Holds the timespan for the auto scrolling interval.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.BeginUpdate">
            <summary>
            Suspends the painting of the control until the <see cref="M:Syncfusion.WinForms.Controls.SfScrollControl.EndUpdate"/> method is called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.EndUpdate">
            <summary>
            Resumes the painting of the control suspended by calling the BeginUpdate method.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.ScrollWindow(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Scrolls the contents of the control based on the given values.
            </summary>
            <returns>Returns the rectangle region that is scrolled.</returns>
            <param name="xAmount">The x amount that need to be scrolled.</param>
            <param name="yAmount">The y amount that need to be scrolled on vertical direction.</param>
            <param name="rect">The bounds that need to be scrolled. </param>
            <param name="clipRect">The ClipRectangle.</param>
            <param name="allowUpdate">Specifies the value for update the window after the scrolling or not.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.UpdateScrollBars">
            <summary>
            Synchronize the scrollbar regions to reflect the changes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnThemeNameChanged(System.String)">
            <summary>
            Helps to apply the ThemeName settings in control
            </summary>
            <param name="themeName">The ThemeName.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.GetControlName(System.String)">
            <summary>
            Helps to apply the ControlName settings in control
            </summary>
            <param name="controlName">The ControlName.</param>
            <returns>Returns the control name.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.IncreaseSmallChange(Syncfusion.WinForms.Controls.ScrollBarBase,System.Int64)">
            <summary>
            Increase the scrollbar SmallChange to perform the accelerated scrolling.
            </summary>
            <param name="scrollBar">The <see cref="T:Syncfusion.WinForms.Controls.ScrollBarBase"/> that need to be accelerate.</param>
            <param name="timerCount">The time count.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.WireScrollEvents">
            <summary>
            Wires the scroll events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.UnwireScrollEvents">
            <summary>
            Unwire the ScrollEvent.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.StopAutoScrollTimer">
            <summary>
            Stops the auto scrolling timer.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides the WndProc method.
            </summary>
            <param name="msg">An Window message.</param>
            <remarks>
            To handle the window messages internally for the Touch, ContextMenu and painting operations.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.RaiseThemeChanged(System.Object,Syncfusion.Windows.Forms.Events.ThemeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Theme.IThemeProvider.ThemeNameChanged"/> and <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.ThemeChanged"/> event when theme name changed.
            </summary>
            <param name="sender">The sender value.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Events.ThemeChangedEventArgs"/> contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnParentChanged(System.EventArgs)">
            <summary>
            Updates the parent form of the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.Dispose(System.Boolean)">
            <summary>
            Disposes the unused resources.
            </summary>
            <param name="disposing">Specifies whether to dispose both managed and unmanaged resources or only the unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Performs the mouse wheel scrolling when the <see cref="T:System.Windows.Forms.Control.MouseWheel"/> event is occur.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse pointer is over the control and the mouse button is pressed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when mouse up is performed on the control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Starts the auto scrolling when the mouse pointer is moved away from the scroll bounds.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnMouseLeave(System.EventArgs)">
            <summary>
            Sets the default cursor when the mouse pointer leaves the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnMouseHover(System.EventArgs)">
            <summary>
            Stops the auto scroll timer when the mouse pointer is moves over the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Occurs when the control's display required redraw. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.InvalidateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnEnter(System.EventArgs)">
            <summary>
            Occurs when the control is entered.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnLeave(System.EventArgs)">
            <summary>
            Occurs when the input focus leaves the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs while invalidating is called for the control.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnValidated(System.EventArgs)">
            <summary>
            Occurs when the control finished the validating.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnLostFocus(System.EventArgs)">
            <summary>
            Occurs when the control loses focus.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnGotFocus(System.EventArgs)">
            <summary>
            Occurs when the control receives focus.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Occurs when the control is removed from the <see cref="T:System.WindowsForms.Control.ControlCollection"/>.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Wires the <see cref="T:Control.GotFocus"/> and <see cref="T:Control.LostFocus"/> events of the added control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Updates the scrollbar locations when the <see cref="T:System.Windows.Forms.Control.Size"/> property value is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnLocationChanged(System.EventArgs)">
            <summary>
            Updates the scrollbar locations when the <see cref="T:System.Windows.Forms.Control.Location"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnHandleCreated(System.EventArgs)">
            <summary>
            Wire the parent forms event when the <see cref="T:System.Windows.Forms.Control.HandleCreated"/>.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnVisibleChanged(System.EventArgs)">
            <summary>
            Update the scrollbars when the <see cref="T:System.Windows.Forms.Control.VisibleChanged"/> event is occured.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Starts the auto scrolling timer when the mouse is dragging over the control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.DragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Occurs on Changing the RTL mode of the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.StartAutoScrollTimer(System.Windows.Forms.Message)">
            <summary>
            Starts the AutoScroll timer.
            </summary>
            <param name="m">The message to be sent to the current control.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.StartAutoScrollTimer(System.Windows.Forms.Message,System.TimeSpan)">
            <summary>
            Starts the AutoScroll timer.
            </summary>
            <param name="m">The message to be sent to the current control.</param>
            <param name="autoScrollInterval">The initial interval for sending messages.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.CreateAccessibilityInstance">
            <summary>
            Overridden to update the Accessibility object of the SfScrollControl.
            </summary>
            <returns>Returns the accessibility object of the SfScrollControl</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.ScrollWindowInvalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the Scroll window.
            </summary>
            <param name="r">The Rectangle region that need to be invalidate.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnTouchPanBegin(System.Drawing.Point)">
            <summary>
            Initially save the current scrollbar values when begin the panning operation.
            </summary>
            <param name="touchBeginPoint">Touch begin position.</param>
            <returns>return true</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnTouchPan(System.Drawing.Point,System.Boolean)">
            <summary>
            Adjust the horizontal and vertical scrollbar values based on current touch position.
            </summary>
            <param name="currentTouchPoint">The current touch position.</param>
            <param name="isSwipeScroll">Used to decide whether to perform swipe or pan operation.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnTouchPanEnd(System.Drawing.Point)">
            <summary>
            After panning operation completes save the current scroll bar values.
            </summary>
            <param name="touchEndPoint">The touch end position.</param>
            <returns>Return true.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnBeginAutoScroll(Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.BeginAutoScroll"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinForms.Controls.Events.BeginAutoScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnEndAutoScroll(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.EndAutoScroll"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnSetCursor(System.Windows.Forms.Message@)">
            <summary>
            Sets the current mouse cursor. 
            </summary>
            <param name="m">The Window message.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnHorizontalScrollBarValueChanged">
            <summary>
            Occurs when the horizontal scrollbar value is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnVerticalScrollBarValueChanged">
            <summary>
            Occurs when the vertical scrollbar value is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnHorizontalScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.Scroll"/> event for horizontal scroll.
            </summary>
            <param name="se">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnVerticalScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.Scroll"/> event for vertical scroll.
            </summary>
            <param name="se">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnWindowScrolled(Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.WindowScrolled"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnWindowScrolling(Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Controls.SfScrollControl.WindowScrolling"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinForms.Controls.Events.ScrollWindowEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnControlGotFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. This method is called when the control
            or any child control gets focus and this control did not have focus before.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnControlLostFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event. This method is called when the control
            or any child control loses focus and the new focused control is not a child of this control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.MAKELPARAM(System.Int32,System.Int32)">
            <summary>
            Creates a value for use as an lParam parameter in a message. 
            </summary>
            <returns>Returns the LPARAM value.</returns>
            <param name="low">The lower order value.</param>
            <param name="high">The higher order value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.GetScrollValue(Syncfusion.WinForms.Controls.ScrollProperties,System.Int32)">
            <summary>
            Gets the resolved scrollbar value based on the min, max values of the scrollbar.
            </summary>
            <param name="scrollProperties">The ScrollProperties of the scrollbar.</param>
            <param name="value">The value that needs to be resolved.</param>
            <returns>Returns the resolved scrollbar value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.WiredParentFormEnter(System.Object,System.EventArgs)">
            <summary>
            Occurs when the user is enters to the parent form.
            </summary>
            <param name="sender">An object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnVerticalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="P:Syncfusion.WinForms.Controls.SfScrollControl.VerticalScroll"/> event.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="se">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnHorizontalScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Syncfusion.WinForms.Controls.ScrollBarBase.ValueChanged"/> of the horizontal scrollbar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnVerticalScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Syncfusion.WinForms.Controls.ScrollBarBase.ValueChanged"/> of the vertical scrollbar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnHorizontalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="P:Syncfusion.WinForms.Controls.SfScrollControl.HorizontalScroll"/> event.
            </summary>
            <param name="sender">The object of the sender..</param>
            <param name="se">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.DecodeGesture(System.Windows.Forms.Message@)">
            <summary>
            Decode the touch messages to do corresponding operations
            </summary>
            <param name="msg">windows touch messages</param>
            <returns>Return true when the message properly handled otherwise it will be false</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.SetVisibleScrollbars(System.Boolean,System.Boolean)">
            <summary>
            Display or hides the horizontal and vertical auto scrollbars.
            </summary>
            <param name="horiz">True if the horizontal scrollbar should be displayed.</param>
            <param name="vert">True if the vertical scrollbar should be displayed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.RepeatScrollEventTimerElapsed(System.Object,System.EventArgs)">
            <summary>
            Elapse the time for scroll event.
            </summary>
            <param name="source">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.ChildGotFocus(System.Object,System.EventArgs)">
            <summary>Occurs when the child control got the focus.</summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>  
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.ChildLostFocus(System.Object,System.EventArgs)">
            <summary>Occurs when the child lost the focus.</summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>  
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.RaiseControlGotFocus">
            <summary>
            Sets the focus for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.RaiseControlLostFocus">
            <summary>
            Reset the focus for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.AdjustSizeGrip">
            <summary>
            Adjust the location of the SizeGrip.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.ShouldSerializeStyle">
            <summary>
            Determines whether the Style should be serialized or not.
            </summary>
            <returns>Returns true if the style need to be serialized otherwise return false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollControl.OnReaderModeScroll(System.Object,Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs)">
            <summary>
            Performs the reader mode mouse scrolling.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:Syncfusion.WinForms.Controls.Events.ReaderModeScrollControllerEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfScrollControl.Scroll">
            <summary>
            Occurs when scrolling is performed.
            </summary>        
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfScrollControl.BeginAutoScroll">
            <summary>
            Occurs when accelerated scrollbar scrolling or mouse drag-scrolling starts.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfScrollControl.EndAutoScroll">
            <summary>
            Occurs when the auto scrolling is ends.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfScrollControl.WindowScrolled">
            <summary>
            Occurs after the window has been scrolled.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfScrollControl.WindowScrolling">
            <summary>
            Occurs while the window is being scrolled.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfScrollControl.ThemeChanged">
            <summary>
            Occurs when theme name of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollControl"/> has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AutoScrollMode">
            <summary>
            Gets or sets the direction for automatic scrolling when the user drags 
            the mouse cursor out of the scrolling area.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.VerticalScrollIncrement">
            <summary>
            Gets or sets the multiplier for vertical mouse wheel scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.HorizontalScrollIncrement">
            <summary>
            Gets or sets the multiplier for horizontal mouse wheel scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.VerticalScroll">
            <summary>
            Gets the vertical scrollbar settings of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.HorizontalScroll">
            <summary>
            Gets the horizontal scrollbar settings of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AutoScrollBounds">
            <summary>
            Gets or sets a bounds for the auto scrolling. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AutoScrollMargin">
            <summary>
            Gets or sets a default margins for the scrolling area when the user moves the mouse to the
            margin between InsideScrollBounds and AutoScrollBounds.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.Style">
            <summary>
            Gets or sets a style of the ScrollControl components.
            </summary>        
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.HorizontalScrollBarVisible">
            <summary>
            Gets or sets a value indicating whether the horizontal scroll bar is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.VerticalScrollBarVisible">
            <summary>
            Gets or sets a value indicating whether the vertical scroll bar is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AllowReaderModeScrolling">
            <summary>
            Gets or sets a value indicating whether the reader mode mouse scrolling is enabled or not.
            </summary>
            <remarks>
            Reader mode shows a special scroll origin icon and scrolls the window in a direction and speed relative to the scroll origin.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.IsUpdating">
            <summary>
            Gets a value indicating whether the BeginUpdate() has been called and the painting for a control is suspended.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.ClientRectangle">
            <summary>
            Gets the rectangle that represents the client area of the control. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.ClientSize">
            <summary>
            Gets or sets the ClientSize of the control based on the visibility of the scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AutoScrollInterval">
            <summary>
            Gets or sets a <see cref="T:System.TimeSpan"/> value for the auto scrolling. 
            </summary>     
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AccessibilityEnabled">
            <summary>
            Gets or sets a value indicating whether the accessibility is enabled for the control or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.OverrideCursor">
            <summary>
            Gets or sets a cursor that needs to be applied for the scroll control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AutoScrollTimerEnable">
            <summary>
            Gets a value indicating whether the control is currently scrolling and the user drags
            the mouse outside the inner scrolling area.
            </summary>                
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.CreateParams">
            <summary>
            Changes <see cref="P:System.Windows.Forms.CreateParams.Style"/> RTL extended styles and also consider the control's
            <see cref="!:SfScrollControl.BorderStyle"/> setting.
            </summary>       
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.AllowAutoScroll">
            <summary>
            Gets or sets a value indicating whether the AutoScrolling can be enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollControl.InsideScrollBounds">
            <summary>
            Gets the inside scrolling area. The control will scroll if the user drags
            the mouse outside this area.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.SizeGrip">
            <summary>
            Represents the class that provides the method for drawing the size grip.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SizeGrip.style">
            <summary>
            The default style info of the size grip.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SizeGrip.sfScrollControl">
            <summary>
            The attached SfScrollControl;
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SizeGrip.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.SizeGrip"/> class.
            </summary>
            <param name="parent">The control that need to be display the size grip.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SizeGrip.#ctor(System.Windows.Forms.Control,Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.SizeGrip"/> class.
            </summary>
            <param name="parent">The control that need to be display the size grip.</param>
            <param name="style">The <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo"/> of the control.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SizeGrip.#ctor(Syncfusion.WinForms.Controls.SfScrollControl,Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.SizeGrip"/> class.
            </summary>
            <param name="parent">The control that need to be display the size grip.</param>
            <param name="style">The <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo"/> of the control.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SizeGrip.GetStyle">
            <summary>
            Gets the style of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo"/>.
            </summary>
            <returns>Returns the ScrollControl' size grip style.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SizeGrip.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden to draw the size grip of the control.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SizeGrip.DrawSizeGrip(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo)">
            <summary>
            Draws the size grip.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> of the control.</param>
            <param name="rect">The rectangle region that need to be draw the size grip.</param>
            <param name="sizeGripStyle">The style information of the SizeGrip.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SizeGrip.Style">
            <summary>
            Gets or sets the style for drawing the size grip.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo">
            <summary>
            Implements the functionalities that provides a StyleInfoBase object for ScrollBarStyleInfo properties in a ScrollBar. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.defaultScrollBarStyleInfo">
            <summary>
            Holds the default style info of the scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> class.
            </summary>
            <param name="identity">
            A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this
            <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/>.
            </param> 
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> class.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object registered with the new owner style object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.GetDefaultStyle">
            <summary>
            Gets the default value for the ScrollBarStyleInfo. 
            </summary>
            <returns>Returns the default value for the ScrollBarStyleInfo object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ShouldSerializeArrowButtonPressedForeColor">
            <summary>
                Determines whether StackedHeaderStyle has been modified and its contents should be serialized at design-time.
            </summary>
            <returns>True if contents were changed; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.Default">
            <summary>
            Gets the default style for the ScrollBarStyleInfo object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonBackColor">
            <summary>
            Gets or sets the background color for the arrow button.
            </summary>
            <remarks>
            This is applicable for both the Min and Max buttons.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonBackColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonBackColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonHoverBackColor">
            <summary>
            Gets or sets the background color for the arrow button in hovering state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonHoverBackColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonHoverBackColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonPressedBackColor">
            <summary>
            Gets or sets the background color for the arrow button in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonPressedBackColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonPressedBackColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonForeColor">
            <summary>
            Gets or sets the foreground color for the arrow button.
            </summary>
            <remarks>
            This will set the background color for the arrow which is shown in the arrow button.
            This is applicable for both the Min and Max buttons.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonForeColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonForeColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonHoverForeColor">
            <summary>
            Gets or sets the foreground color for the arrow button in hovering state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonHoverForeColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonHoverForeColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonPressedForeColor">
            <summary>
            Gets or sets the foreground color for the arrow button in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonPressedForeColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonPressedForeColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ScrollBarBackColor">
            <summary>
            Gets or sets the background color for the scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasScrollBarBackColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ScrollBarBackColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbColor">
            <summary>
            Gets or sets the background color for the thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbHoverColor">
            <summary>
            Gets or sets the background color for the thumb in hovering state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbHoverColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbHoverColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbPressedColor">
            <summary>
            Gets or sets the background color for the thumb in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbPressedColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbPressedColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbWidth">
            <summary>
            Gets or sets the width of the thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbWidth">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbWidth"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonBorderColor">
            <summary>
            Gets or sets the border background color for the arrow button.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonHoverBorderColor">
            <summary>
            Gets or sets the hover border color for the arrow button.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonPressedBorderColor">
            <summary>
            Gets or sets the pressed border color for the arrow button.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonDisabledBorderColor">
            <summary>
            Gets or sets the disabled border color for the arrow button.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbBorderColor">
            <summary>
            Gets or sets a value for ThumbBorderColor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbHoverBorderColor">
            <summary>
            Gets or sets a value for hover border color of the thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbPressedBorderColor">
            <summary>
            Gets or sets a value for pressed border color of the thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbDisabledBorderColor">
            <summary>
            Gets or sets a value for disabled border color of the thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbDisabledColor">
            <summary>
            Gets or sets a value for ThumbDisabledColor.
            </summary>  
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbDisabledColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbDisabledColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonDisabledForeColor">
            <summary>
            Gets or sets the value for ArrowButtonDisabledForeColor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonDisabledForeColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonDisabledForeColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonDisabledBackColor">
            <summary>
            Gets or sets the value for ArrowButtonDisabledBackColor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonDisabledBackColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonDisabledBackColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbHoverBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbHoverBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbPressedBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbPressedBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasThumbDisabledBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbDisabledBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonHoverBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonHoverBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonPressedBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonPressedBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.HasArrowButtonDisabledBorderColor">
            <summary>
            Gets a value indicating whether the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonDisabledBorderColor"/> property has been modified for the current object.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore">
            <summary>
            Contains the collection of <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> properties.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonBackColorProperty">
            <summary>
            Gets the value for the ArrowButton BackColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonHoverBackColorProperty">
            <summary>
            Gets the value for the ArrowButton hover BackColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonPressedBackColorProperty">
            <summary>
            Gets the value for the ArrowButton pressed BackColor properly.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonForeColorProperty">
            <summary>
            Gets the value for the ArrowButton ForeColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonHoverForeColorProperty">
            <summary>
            Gets the value for the ArrowButton hover ForeColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonPressedForeColorProperty">
            <summary>
            Gets the value for the ArrowButton pressed ForeColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ScrollBarBackColorProperty">
            <summary>
            Gets the value for the ScrollBarBackColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbColorProperty">
            <summary>
            Gets the value for the ThumbColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbHoverColorProperty">
            <summary>
            Gets the value for the ThumbHoverColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbPressedColorProperty">
            <summary>
            Gets the value for the ThumbPressedColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbWidthProperty">
            <summary>
            Gets the value for the ThumbWidth property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonBorderColorProperty">
            <summary>
            Gets the value for the ArrowButtonBorderColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonHoverBorderColorProperty">
            <summary>
            Gets the value for the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonHoverBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonPressedBorderColorProperty">
            <summary>
            Gets the value for the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonPressedBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonDisabledBorderColorProperty">
            <summary>
            Gets the value for the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ArrowButtonDisabledBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbBorderColorProperty">
            <summary>
            Gets the value for the ThumbBorderColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbHoverBorderColorProperty">
            <summary>
            Gets the value for the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbHoverBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbPressedBorderColorProperty">
            <summary>
            Gets the value for the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbPressedBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbDisabledBorderColorProperty">
            <summary>
            Gets the value for the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo.ThumbDisabledBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ThumbDisabledColorProperty">
            <summary>
            Gets the value for ThumbDisabledColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonDisabledForeColorProperty">
            <summary>
            Gets the value for ArrowButtonDisabledForeColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.ArrowButtonDisabledBackColorProperty">
            <summary>
            Gets the value for ArrowButtonDisabledBackColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.sd">
            <summary>
            Holds the static data for the Scrollbar style info store.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore"/> class from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.Clone">
            <override/>
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>Copied object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.GetStaticData">
            <summary>
            Initializes the StaticData, if <see cref="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.sd"/> is null.
            </summary>
            <returns>Returns the StaticData.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoStore.StaticDataStore">
            <summary>
            Provides the static data of the ScrollBarStyleInfo.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle">
            <summary>
            Contains the list of properties that are used to customize the appearance of the scroll control.
            </summary>
            <remarks>
            This contains the elements that are available in the scroll control. i.e. Horizontal scrollbar, Vertical scrol bar and SizeGripper.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.defaultStyle">
            <summary>
            It contains the value of the <see cref="!:Syncfusion.WinForms.Controls.ScrollerVisualStyle"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.#ctor(Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle"/> class.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle"/> class.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Styles.VisualStyleInfoStore"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle"/> class.
            </summary>
            <param name="control">
            A <see cref="T:System.Windows.Forms.Control"/> to create the identity for ScrollBars.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.ShouldSerializeHorizontalScrollBar">
            <summary>
            Determines whether HorizontalScrollBar has been modified and its contents should be serialized at design-time.
            </summary>
            <returns>True if contents were changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.ShouldSerializeVerticalScrollBar">
            <summary>
            Determines whether VerticalScrollBar has been modified and its contents should be serialized at design-time.
            </summary>
            <returns>True if contents were changed; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.CreateSubObjectIdentity(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Override this method to create a product-specific identity object for a sub object.
            </summary>
            <returns>An identity object for a sub object of this style.</returns>
            <param name="sip">The <see cref="T:Syncfusion.Styles.StyleInfoProperty"/>.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.GetDefaultStyle">
            <summary>
            Provide the default style of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle"/>.
            </summary>
            <returns>Default style object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.Dispose(System.Boolean)">
            <summary>
            Disposes the unused resources.
            </summary>
            <param name="disposing">Specifies whether to dispose both managed and unmanaged resources or only the unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.ShouldSerializeSizeGrip">
            <summary>
            Determines whether SizeGrip has been modified and its contents should be serialized at design-time.
            </summary>
            <returns>True if contents were changed; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.DefaultStyle">
            <summary>
            Gets the default style of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.HorizontalScrollBar">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> for the horizontal scrollbar of the scroll control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.VerticalScrollBar">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> for the vertical scrollbar of the scroll control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.SizeGrip">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo"/> for the size grip of the scroll control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoSubObjectIdentity">
            <summary>
            Defines a class that provides style identity information for nested objects of the VisualStyleInfo class of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoSubObjectIdentity.#ctor(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoSubObjectIdentity"/> class and associates it with a specified.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> that owns this sub-object.</param>
            <param name="sip">The <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> descriptor for this expandable sub-object.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore">
            <summary>
            Provides storage for the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore"/> object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.HorizontalScrollBarProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.HorizontalScrollBar"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.VerticalScrollBarProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.VerticalScrollBar"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.SizeGripProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle.SizeGrip"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.staticData">
            <summary>
            It contains the value of the <see cref="P:Syncfusion.WinForms.Controls.Styles.FormStyleInfoStore.StaticDataStore"/> property value.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore"/> class from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.GetStaticData">
            <summary>
            Initializes the StaticData, if <see cref="F:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.staticData"/> is null.
            </summary>
            <returns>Returns the StaticData</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyleInfoStore.StaticDataStore">
            <summary>
            Gets the static data value of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollerVisualStyle"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore">
            <summary>
            Contains the static data of the SizeGripStyleInfo class.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.ForeColorProperty">
            <summary>
            Gets the value of ForeColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.BackColorProperty">
            <summary>
            Gets the value of BackColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.ShowResizeGripperProperty">
            <summary>
            Gets the value of the ShowResizeGripper property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.sd">
            <summary>
            Holds the static data of the size grip style info.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore"/> class from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.Clone">
            <override/>
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>Copied object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.GetStaticData">
            <summary>
            Initializes the StaticData, if <see cref="F:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.sd"/> is null.
            </summary>
            <returns>Returns the StaticData.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore.StaticDataStore">
            <summary>
            Gets the static data for the SizeGripStyleInfo. 
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoIdentity">
            <summary>
            Implements the class that provide an identity information of <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> using 
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoIdentity.sfScrollControl">
            <summary>
            Maintains the SfScrollContol for create the identity. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoIdentity.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoIdentity"/> class.
            </summary>
            <param name="scrollControl">
            Control to create an identity for ScrollBars(HorizontalScrollBar/VerticalScrollBar).
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Loops through all base styles until it finds a style that has a specific property initialized.
            </summary>
            <param name="thisStyleInfo">A instance of <see cref="T:Syncfusion.Styles.IStyleInfo"/></param>
            <returns>
            Returns the <see cref="T:Syncfusion.Styles.IStyleInfo"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfoIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs when a property in the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> has changed.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> instance that has changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo">
            <summary>
            Implements the functionalities that holds all information stored for a SizeGrip of the scroll control.
            </summary>
            <remarks>
            ScrollBarSizeGripStyleInfo provides user-friendly access to all properties stored
            in ScrollBarSizeGripStyleInfoStore.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.defaultSizeGripStyleInfo">
            <summary>
            Holds the default style info of the Scrollbar size grip.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo"/> class.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo"/> class.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object registered with the new owner style object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.GetDefaultStyle">
            <summary>
            Gets the default style of the SizeGrip.
            </summary>
            <returns>Returns the default style.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.Default">
            <summary>
            Gets the default value for the SizeGripStyleInfo.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.ForeColor">
            <summary>
            Gets or sets the fore color for the SizeGrip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.HasForeColor">
            <summary>
            Gets a value indicating whether ForeColor property is modified or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.BackColor">
            <summary>
            Gets or sets the BackColor for the SizeGrip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.HasBackColor">
            <summary>
            Gets a value indicating whether the BackColor property has been modified or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.ShowResizeGripper">
            <summary>
            Gets or sets a value indicating whether the displaying of resize gripper. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ScrollBarSizeGripStyleInfo.HasShowResizeGripper">
            <summary>
            Gets a value indicating whether the ShowResizeGripper property has been modified or not.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.VerticalScrollBar">
            <summary>
            Represents a class that is used to draw the vertical scrollbar of the scroll control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.VerticalScrollBar.DefaultThumbHeight">
            <summary>
            The default height of the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.VerticalScrollBar.deltaY">
            <summary>
            Holds the mouse down position on the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.VerticalScrollBar.defaultSize">
            <summary>
            The default size of the scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.VerticalScrollBar.sfScrollControl">
            <summary>
            The attached SfScrollControl;
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.VerticalScrollBar"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.#ctor(Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.VerticalScrollBar"/> class.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> for the vertical scrollbar.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.#ctor(Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo,Syncfusion.WinForms.Controls.SfScrollControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.VerticalScrollBar"/> class.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/> for the vertical scrollbar.</param>
            <param name="control">Instance of SfScrollControl </param>&gt;
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.GetStyle">
            <summary>
            Gets the style of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ScrollBarStyleInfo"/>
            </summary>
            <returns>Returns the ScrollControl' vertical scrollbar style.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.PointToValue(System.Int32,System.Int32)">
            <summary>
            Gets the value of the vertical scrollbar at the given cursor position.
            </summary>
            <param name="x">The x co-ordinate of the cursor.</param>
            <param name="y">The y co-ordinate of the cursor.</param>
            <returns>Returns the value of the given co-ordinates.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.InvalidateArrowRegion">
            <summary>
            Invalidates the Arrow location.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.InvalidateThumbRegion">
            <summary>
            Invalidates the scrollbar thumb location.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.CalculateThumbDelta(System.Int32,System.Int32)">
            <summary>Calculates the delta value in vertical co-ordinates.</summary>
            <param name="x">The X position of the cursor.</param>
            <param name="y">The y position of the cursor.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.OnThumbPositionChanged(System.Int32,System.Int32)">
            <summary>
            Calculates the thumb position on moving the cursor over the scrollbar.
            </summary>
            <param name="x">The X co-ordinate of the cursor.</param>
            <param name="y">The Y co-ordinate of the cursor.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.OnScrollHereClick(System.Object,System.EventArgs)">
            <summary>
            Occurs while clicking the ScrollHere option from the context menu.
            </summary>
            <param name="sender">The sender of the object.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.OnPageDownRightClick(System.Object,System.EventArgs)">
            <summary>
            Occurs while clicking the ScrollDown option from the context menu.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.OnPageUpLeftClick(System.Object,System.EventArgs)">
            <summary>
            Occurs while clicking the PageUp option from the context menu.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.VerticalScrollBar.CalculateThumbTopAndBottomRegion">
            <summary>
            Calculating bounds for left and right Thumb regions of the scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.VerticalScrollBar.DefaultSize">
            <summary>
            Gets the default size of the vertical scrollbar.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.SfScrollFrame">
            <summary>
            Represents the component that manages the scrollbars of the control and assigns the theme-able scrollbars to that control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.LARGE_ICON_VIEW_SMALL_CHANGE">
            <summary>
            LargeIcon View small increment value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.SMALL_ICON_VIEW_SMALL_CHANGE">
            <summary>
            SmallIcon View small increment value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.TILE_VIEW_SMALL_CHANGE">
            <summary>
            Tile View small increment value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.DETAILS_VIEW_SMALL_CHANGE">
            <summary>
            Details View small increment value.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.LIST_VIEW_SMALL_CHANGE">
            <summary>
            List View small increment value. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.sizeGrip">
            <summary>
            Represents the instance of the SizeGrip
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.attachedControl">
            <summary>
            The control that is attached to the SfScrollerFrame.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.nativeWindowWrapper">
            <summary>
            Provides the PreFilterMessage for handling the WndProc messages of the attached control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.style">
            <summary>
            The style of the scroller frame.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.hScrollBarInfo">
            <summary>
            Represents the struct that holds the details of the horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.vScrollBarInfo">
            <summary>
            Represents the struct that holds the details of the vertical scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.hScrollInfo">
            <summary>
            Represents the struct that holds the details of the horizontal scroll info.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfScrollFrame.vScrollInfo">
            <summary>
            Represents the struct that holds the details of the vertical scroll info.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollFrame"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OnThemeNameChanged(System.String)">
            <summary>
            Helps to apply the ThemeName settings in control
            </summary>
            <param name="themeName">The ThemeName.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.GetControlName(System.String)">
            <summary>
            Helps to apply the ControlName settings in control
            </summary>
            <param name="controlName">The ControlName.</param>
            <returns>Returns the control name.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.Refresh">
            <summary> 
            Forces the scroller frame to update the attached scrollbars and immediately redraw its scrollbars.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Updates the SfScrollerFrame based on the WndProc message of the parent control.
            </summary>
            <param name="m">The <see cref="T:System.Windows.Forms.Message"/> that passed to the parent control.</param>
            <returns>
            Return true when the message is need to be forward to the parent, otherwise return false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.UpdateScrollbarPosition">
            <summary>
            Updates the scrollbar location based on the system scrollbars of the attached control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.UpdateSmallIncrementListView">
            <summary>
            Updates the small increment value for the List view.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.RaiseThemeChanged(System.Object,Syncfusion.Windows.Forms.Events.ThemeChangedEventArgs)">
            <summary>
            Raises the <see cref="!:IThemeProvider.ThemeNameChanged"/> and <see cref="E:Syncfusion.WinForms.Controls.SfScrollFrame.ThemeChanged"/> event when theme name changed.
            </summary>
            <param name="sender">The sender value.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Events.ThemeChangedEventArgs"/> contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Updates the SfScrollerFrame based on the WndProc message of the parent control.
            </summary>
            <param name="m">The <see cref="T:System.Windows.Forms.Message"/> that passed to the parent control.</param>
            <returns>
            Return true when the message is need to be forward to the parent, otherwise return false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.Dispose(System.Boolean)">
            <summary>
            Disposes the unused resources.
            </summary>
            <param name="disposing">Specifies whether to dispose both managed and unmanaged resources or only the unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.UpdateScrollBarValues(Syncfusion.WinForms.Controls.ScrollBarBase,Syncfusion.WinForms.Core.NativeScroll.SCROLLINFO)">
            <summary>
            Updates the scrollbar values based on the scroll info.
            </summary>
            <param name="bar">The scrollbar that need to be updated.</param>
            <param name="scrollInfo">The scroll info of the attached control.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.AttachFrame(System.Windows.Forms.Control)">
            <summary>
            Attaches the given control to the SfScrollerFrame.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that need to be attached.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OnHorizontalScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the value is changed for the horizontal scrollbar
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OnVerticalScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the value is changed for the vertical scrollbar
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OwnerVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the visibility of the scrollbars when the attached control's visibility is changed.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OwnerParentChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the parent of the attached control is changed.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OwnerRightToLeftChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the <see cref="T:System.Windows.Forms.RightToLeft"/> when changing the RTL mode of the parent control.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OwnerHandleDestroyed(System.Object,System.EventArgs)">
            <summary>
            Removes the scrollbars when the attached controls handle is destroyed.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OwnerHandleCreated(System.Object,System.EventArgs)">
            <summary>
            Performs the AttachFrmae when the handle is created for the attached control.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.AttachScrollBars">
            <summary>
            Attaches the scrollbars to the parent control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.UpdateParent">
            <summary>
            Updates the scrollbars parent control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.SynchronizeScrollBars">
            <summary>
            Synchronizes the horizontal and vertical scrollbars.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.DetachFrame">
            <summary>
            Removes the <see cref="T:Syncfusion.WinForms.Controls.SfScrollFrame"/> from the attached control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.DetachScrollBars">
            <summary>
            Removes the scrollbars when the attached controls parent handle is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.UpdateScrollBarVisibility(System.Boolean)">
            <summary>
            Updates the visibility of the scrollbars.
            </summary>
            <param name="value">Represents the visibility of the scrollbars. When its set to true, 
            It will update the parent scrollbars visibility. Otherwise it will hides the scrollbars.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OnScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Performs the scrolling of the attached control through the SfScrollbars.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.ListViewScroll(System.Windows.Forms.ScrollEventArgs,Syncfusion.WinForms.Core.NativeScroll.SCROLLINFO,System.Int32)">
            <summary>
            Performs the scrolling of the attached list view control.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains event data.</param>
            <param name="scrollInfo">The native scroll info of the attached control.</param>
            <param name="scrollBar">The integer value that specifies the scrollbar type.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.GetListViewScrollValue(System.Windows.Forms.ScrollEventArgs,System.Windows.Forms.ListView,Syncfusion.WinForms.Core.NativeScroll.SCROLLINFO,System.Int32@)">
            <summary>
            Gets the scroll value of the list view.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains event data.</param>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> of that need to be scrolled.</param>
            <param name="scrollInfo">The native scroll info of the control.</param>
            <param name="detailsViewFactor">The value that is used to calculate the scroll position in DetailsView of list view.</param>
            <returns>Return the scroll value of the list view.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfScrollFrame.OnStyleChanged(System.Object,Syncfusion.Styles.StyleChangedEventArgs)">
            <summary>
            Occurs when style is changed.
            </summary>
            <param name="sender">The changed style object.</param>
            <param name="e">The <see cref="T:Syncfusion.Styles.StyleChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfScrollFrame.ThemeChanged">
            <summary>
            Occurs when theme name of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollFrame"/> has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollFrame.VerticalScrollBar">
            <summary>
            Gets the vertical scrollbar of the attached scroller frame.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollFrame.HorizontalScrollBar">
            <summary>
            Gets the horizontal scrollbar of the attached scroller frame.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollFrame.Control">
            <summary>
            Gets or sets the control to attach the scroll frame.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfScrollFrame"/> can be attached to a control which is derived from the
             <see cref="T:System.Windows.Forms.ScrollableControl"/> or if the WS_HSCROLL and WS_VSCROLL window styles are enabled for that control.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollFrame.Style">
            <summary>
            Gets or sets the <see cref="!:Syncfusion.WinForms.Controls.ScrollerVisualStyle"/> with settings that control the appearance of the <see cref="T:Syncfusion.WinForms.Controls.SfScrollFrame"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollFrame.IsHorizontalScrollVisible">
            <summary>
            Gets a value indicating whether the horizontal scrollbar is visible for the attached control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollFrame.SizeGrip">
            <summary>
            Gets the SizeGrip of the ScrollFrame
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfScrollFrame.IsVerticalScrollVisible">
            <summary>
            Gets a value indicating whether the vertical scrollbar is visible for the attached control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ScrollFrameStyleInfoIdentity">
            <summary>
            Implements the class that provide an identity information of <see cref="!:Syncfusion.WinForms.Controls.Styles.ScrollFrameInfoIdentity"/> using 
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ScrollFrameStyleInfoIdentity.sfScrollFrame">
            <summary>
            Maintains the SfScrollFrame for create the identity. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollFrameStyleInfoIdentity.#ctor(Syncfusion.WinForms.Controls.SfScrollFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ScrollFrameStyleInfoIdentity"/> class.
            </summary>
            <param name="scrollFrame">
            Control to create an identity for ScrollFrame.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollFrameStyleInfoIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Loops through all base styles until it finds a style that has a specific property initialized.
            </summary>
            <param name="thisStyleInfo">A instance of <see cref="T:Syncfusion.Styles.IStyleInfo"/></param>
            <returns>
            Returns the <see cref="T:Syncfusion.Styles.IStyleInfo"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ScrollFrameStyleInfoIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs when a property in the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> has changed.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> instance that has changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.NativeWindowWrapper">
            <summary>
            Provides the a NativeWindow that used to pre-filter the WndProc messages of the given handle.
            </summary>
            <remarks>
            Its used to updated the scroll positions and the scrolling of the attached control to the SfScrollerFrame.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.NativeWindowWrapper.messageFilter">
            <summary>
            Message filter for the native windows.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.NativeWindowWrapper.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.NativeWindowWrapper"/> class.
            </summary>
            <param name="hWnd">Window Handle.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.NativeWindowWrapper.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the WndProc method.
            </summary>
            <param name="m">The window message that need to be processed.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.NativeWindowWrapper.MessageFilter">
            <summary>
            Gets or sets the reference of the message filter instance.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ButtonDesigner">
            <summary>
            Implements the <see cref="T:System.Windows.Form.ControlDesigner"/> for <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDesigner.actionLists">
            <summary>
            Designer ActionList collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDesigner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ButtonDesigner"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonDesigner.ActionLists">
            <summary>
            Gets a designer action list collection to provide the designer action support for <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ButtonActionList">
            <summary>
            Defines a class which implements the <see cref="T:Syncfusion.WinForms.Core.DesignerActionListBase"/> that 
            supports the actions performed in the designer window of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.WinForms.Core.DesignerActionListBase">
            <summary>
            Defines a class which implements the <see cref="T:System.ComponentModel.Design.DesignerActionList"/> that supports the actions performed in the designer window of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.DesignerActionListBase.documentationLink">
            <summary>
            The string value contains the documentation link details.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.DesignerActionListBase.forumLink">
            <summary>
            The string value contains the forum link details.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.DesignerActionListBase.directTracLink">
            <summary>
            The string value contains the online link details.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.DesignerActionListBase.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.DesignerActionListBase"/> class.
            </summary>
            <param name="component">A component related to the  <see cref="T:System.ComponentModel.Design.DesignerActionList"/>.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.DesignerActionListBase.GetSortedActionItems">
            <summary>
            Returns the collection of <see cref="T:System.ComponentModel.Design.DesignerActionItem"/> objects contained in the list.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection"/> array that contains the <see cref="T:System.ComponentModel.Design.DesignerActionItem"/> in this list.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.DesignerActionListBase.AddDefaultActionItems(System.ComponentModel.Design.DesignerActionItemCollection)">
            <summary>
            Used to add the default action items to be displayed in smart tag panel.
            </summary>
            <param name="actionItems">Collection of ActionItems of the SmartTag panel.</param>
            <returns>returns the <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection"/> array that 
            contains the <see cref="T:System.ComponentModel.Design.DesignerActionItem"/> of the SmartTag panel.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.DesignerActionListBase.OnViewOnlineDocumentation">
            <summary>
            Opens the User Guide documentation for WindowsForms link.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.DesignerActionListBase.OnViewForums">
            <summary>
            Opens the Forums for WindowsForms link.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.DesignerActionListBase.OnViewDirectTrac">
            <summary>
            Opens the Direct-Trac login link.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.DesignerActionListBase.OnView(System.String)">
            <summary>
            Used to open the provided link.
            </summary>
            <param name="link">The link to be opened in browser.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Core.DesignerActionListBase.DocumentationLink">
            <summary>
            Gets or sets the link for Online Documentation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.DesignerActionListBase.ForumLink">
            <summary>
            Gets or sets the link for Forums.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.DesignerActionListBase.DirectTracLink">
            <summary>
            Gets or sets the Direct-Trac Login link.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ButtonActionList"/> class.
            </summary>
            <param name="component">A component related to the  <see cref="T:System.ComponentModel.Design.DesignerActionList"/>.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonActionList.GetSortedActionItems">
            <summary>
            Returns the collection of <see cref="T:System.ComponentModel.Design.DesignerActionItem"/> objects contained in the list.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection"/> array that contains the <see cref="T:System.ComponentModel.Design.DesignerActionItem"/> in this list.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonActionList.GetProperty(System.String)">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptor"/> value from the component based on the given property name.
            </summary>
            <param name="propertyName">The name of the property used to get the property descriptor.</param>
            <returns>Returns the property descriptor value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonActionList.SetValue(System.String,System.Object)">
            <summary>
            Initialize the value to the <see cref="T:System.ComponentModel.PropertyDescriptor"/> of the component based on the property name.
            </summary>
            <param name="propertyName">The property name used to initialize the value.</param>
            <param name="value">The object value to initialize the <see cref="T:System.ComponentModel.PropertyDescriptor"/> of the component.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonActionList.GetValue(System.String)">
            <summary>
            Gets the value of the <see cref="T:System.ComponentModel.PropertyDescriptor"/> of the component based on the property name.
            </summary>
            <param name="propertyName">The string value used to get the value of the component.</param>
            <returns>Returns the object value from component.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.Text">
            <summary>
            Gets or sets the text value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <remarks>
            Changing this property's value at runtime raises the TextChanged event.
            If the <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowRichText"/> property is set to true, can use the
            rich text value to show the button caption.
            </remarks>
            <value>A string value representing the button's caption.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.Image">
            <summary>
            Gets or sets the image of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <value>An <see cref="T:System.Drawing.Image"/> object representing the image to be displayed on the button.
            The default value is <b>null</b>.</value>
            <remarks>
            <para>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> allows to animate,
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.SfButton.Image"/> property and enable the 
            <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property is true.
            </para>
            <para>
            The button's image can also be specified using the ImageList and ImageIndex properties.
            Assign an image collection to the button's ImageList property and then use the ImageIndex property 
            to specify the index of the image to display.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.ImageAlign">
            <summary>
            Gets or sets the image alignment value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <value>One of the System.Drawing.ContentAlignment values. The default value is MiddleCenter.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.TextAlign">
            <summary>
            Gets or sets the text alignment value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <value>One of the System.Drawing.ContentAlignment values. The default value is MiddleCenter.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.BackColor">
            <summary>
            Gets or sets the back color of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <remarks>
            This color has filled to background of the button only when set the
            <see cref="!:GradientStyle"/> property to 
            GradientStyle.None or <see cref="!:Syncfusion.WinForms.Controls.ButtonVisualStyle.GradientBrush"/> property to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.ForeColor">
            <summary>
            Gets or sets the fore color of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <value> 
            A <see cref="T:System.Drawing.Color"/> value representing the foreground color of the control.
            </value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonActionList.FocusRectangleVisible">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> has show 
            focus rectangle when receive focus.
            </summary>
            <value>The <see cref="T:System.Boolean"/> value that specifies whether the dotted focus rectangle is displayed 
            within the SimpleButton when it has focus. The default value is <b>true</b>.</value>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.ButtonDrawingHelper">
            <summary>
            Represents a class that draws the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.AnyRight">
            <summary>
            The value contains any right alignment combination.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.AnyBottom">
            <summary>
            The value contains any bottom alignment combination.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.AnyCenter">
            <summary>
            The value contains any center alignment combination.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.AnyMiddle">
            <summary>
            The value contains any middle alignment combination.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.button">
            <summary>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.textRectangle">
            <summary>
            The rectangle area to draw the text.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.textAlignment">
            <summary>
            The alignment of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.ButtonDrawingHelper.imageRect">
            <summary>
            The rectangle area to draw the image.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.#ctor(Syncfusion.WinForms.Controls.SfButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.ButtonDrawingHelper"/> class.
            </summary>
            <param name="button">A <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> instance.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.Dispose">
            <summary>
            Clean up the unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.DrawButton(System.Drawing.Graphics)">
            <summary>
            Draws the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <param name="graphics" type="System.Drawing.Graphics"> The graphics object to draw.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="dispose">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetBackgroundRect(System.Drawing.Rectangle,System.Single)">
            <summary>
            Calculates the background rectangle area.
            </summary>
            <param name="rect">The button client area.</param>
            <param name="borderWidth">The integer value contains the border width.</param>
            <returns>Returns the calculated background rectangle value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetDisplaceValue(System.Int32,System.Single,System.Int32)">
            <summary>
            Calculate the between space value based on the position and size.
            </summary>
            <param name="position">A integer value indicates the position.</param>
            <param name="size">A size value used to calculate the displace value.</param>
            <param name="clientSize">The client size value used to calculate the displace value.</param>
            <returns>Returns the between space value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateBounds(System.Drawing.SizeF,System.Drawing.RectangleF,System.Drawing.ContentAlignment,System.Boolean)">
            <summary>
            Calculate the bounds based on the horizontal or vertical alignment.
            </summary>
            <param name="size">The size value used to calculate the bounds.</param>
            <param name="rectangle">The rectangle value used to calculate the bounds.</param>
            <param name="alignment">The alignment value used to calculate bounds.</param>
            <param name="isVertical">The boolean value used to calculate bounds in horizontal or vertical direction.</param>
            <returns>Returns the calculated bounds value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetRtlAlignment(System.Drawing.ContentAlignment)">
            <summary>
            Gets the alignment in the right to left mode.
            </summary>
            <param name="align">A alignment value to convert in Right to left mode.</param>
            <returns>Returns the alignment in the right to left mode.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetDisplacedPosition(System.Int32,System.Single,System.Int32)">
            <summary>
            Calculate the between space value based on the alignment and size values.
            </summary>
            <param name="alignment">The alignment flag value to calculate the position.</param>
            <param name="size">A size value used to calculate the displace value.</param>
            <param name="clientSize">The client size value used to calculate the displace value.</param>
            <returns>Returns the between space value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetAlignmentFlags(System.Drawing.ContentAlignment,System.Windows.Forms.TextImageRelation,System.Boolean)">
            <summary>
            Gets the alignment flag value based on the <b>TextImageRelation</b> value.
            </summary>
            <param name="alignment">The alignment value.</param>
            <param name="relation">The relation between the text and image.</param>
            <param name="vertical">The boolean value used to specify the vertical alignment of text and image.</param>
            <returns>The flag value based on the alignment.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetImageDisplace(System.Int32,System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Calculate the displacement value of the image based on the image and text alignment.
            </summary>
            <param name="imageAlignFlag">The image alignment flag value used to calculate the displacement value.</param>
            <param name="textAlignFlag">The text alignment flag value used to calculate the displacement value.</param>
            <param name="imageSize">The image size used to calculate the image displacement value.</param>
            <param name="textSize">The text size used to calculate the image displacement value.</param>
            <param name="clientSize">The client size value used to calculate the displacement value.</param>
            <returns>Returns the image displacement value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetTextDisplace(System.Int32,System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Calculate the displacement value of the text based on the image and text alignment.
            </summary>
            <param name="imageAlign">The image alignment flag value used to calculate the displacement value.</param>
            <param name="textAlign">The text alignment flag value used to calculate the displacement value.</param>
            <param name="imageSize">The image size used to calculate the text displacement value.</param>
            <param name="textSize">The text size used to calculate the text displacement value.</param>
            <param name="clientSize">The client size value used to calculate the image displacement value.</param>
            <returns>Returns the text displacement value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateBounds(System.Drawing.ContentAlignment,System.Drawing.Rectangle,System.Drawing.SizeF)">
            <summary>
            Calculate the rectangle value based on the alignment, size and rectangle.
            </summary>
            <param name="align">A alignment value used to calculate the bounds.</param>
            <param name="rectangle">A rectangle value used to calculate the bounds.</param>
            <param name="size">A size value used to calculate the bounds.</param>
            <returns>Returns the calculated bounds value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.IsDefaultLanguage(System.String)">
            <summary>
            To return if the default language is uisng or not
            </summary>
            <param name="inputstring">string used to find out the default language or not</param>
            <returns>Returns the default language.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the border of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> based on the <see cref="!:Syncfusion.WinForms.Controls.Buttons.ButtonVisualStyle.Border"/> property.
            </summary>
            <param name="graphics" type="System.Drawing.Graphics">The graphics object to draw.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.DrawFocusRectangle(System.Drawing.Graphics)">
            <summary>
            Draws the focus rectangle when control got focused and the <see cref="P:Syncfusion.WinForms.Controls.SfButton.FocusRectangleVisible"/> property is true.
            </summary>
            <param name="graphics">The graphics used to draw the focus rectangle.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateBorderRect(System.Drawing.RectangleF)">
            <summary>
            Calculates the border rectangle based on the border of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/>.
            </summary>
            <param name="rect">The rectangle area to draw the button.</param>
            <returns>Returns the calculated border rectangle value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetFocusedRect(System.Drawing.Rectangle)">
            <summary>
            Calculates the focused rectangle based on the border width.
            </summary>
            <param name="rect">The rectangle area to draw the button.</param>
            <returns>Returns the focused rectangle area.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.DrawBackGround(System.Drawing.Graphics)">
            <summary>
            Draws the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control background.
            </summary>
            <param name="graphics" type="System.Drawing.Graphics">The graphics object to draw.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.DrawImage(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Image)">
            <summary>
            Draws the image on the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control based on its image customization.
            </summary>
            <param name="graphics" type="System.Drawing.Graphics"> The graphics object used to draw the text.</param>
            <param name="bounds">The bounds to be used when rendering the image.</param>
            <param name="image">Image to render.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.DrawText(System.Drawing.Graphics)">
            <summary>
            Draws the text on the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control based on its text customization.
            </summary>
            <param name="graphics" type="System.Drawing.Graphics"> The graphics object to draw.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateImageRectangle">
            <summary>
            Calculates the bounds of the image based on the alignment, size and padding values.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateTextAndImageBounds(System.Drawing.Graphics)">
            <summary>
            Calculate the bounds of the image and text based on the <see cref="T:System.Windows.Forms.ButtonBase.TextImageRelation"/> property.
            </summary>
            <param name="graphics">The graphics value used to calculate text and image bounds.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateTextFirstBounds(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Drawing.Size,System.Drawing.SizeF,System.Drawing.Size,System.Int32)">
            <summary>
            Calculate the text and image bounds based on the alignment flags and size values.
            </summary>
            <param name="graphics">The graphics value used to calculate text and image bounds.</param>
            <param name="imageAlignFlags">The integer value specifies the alignment flag value of image.</param>
            <param name="textAlignFlags">The integer value contains the alignment flag value of text.</param>
            <param name="verticalAlignment">A boolean value specifies the vertical or horizontal alignment of image and text.</param>
            <param name="imageSize">The image size used to calculate the text and image bounds.</param>
            <param name="textSize">The text size used to calculate the text and image bounds.</param>
            <param name="clientSize">The client size used to calculate the text and image bounds.</param>
            <param name="border">The border size used to calculate the text and image bounds.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateImageFirstBounds(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Drawing.Size,System.Drawing.SizeF,System.Drawing.Size,System.Int32)">
            <summary>
            Calculate the text and image bounds when image drawn before the text.
            </summary>
            <param name="graphics">The graphics value used to calculate text and image bounds.</param>
            <param name="imageAlignFlags">The integer value contains the image alignment flag.</param>
            <param name="textAlignFlags">The integer value indicates the text alignment flag.</param>
            <param name="verticalAlignment">The boolean value specifies the alignment of the image and text relation.</param>
            <param name="imageSize">The image size used to calculate the text and image bounds.</param>
            <param name="textSize">The text size used to calculate the text and image bounds.</param>
            <param name="clientSize">The client size used to calculate the text and image bounds.</param>
            <param name="border">The border size used to calculate the text and image bounds.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.CalculateTextRectangle(System.Drawing.Graphics)">
            <summary>
            Calculates the bounds of the text based on the alignment and padding.
            </summary>
            <param name="graphics">The graphics to calculate text size.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.ButtonDrawingHelper.GetTextSize(System.Drawing.SizeF,System.Drawing.Graphics)">
            <summary>
            Calculates the size of the text based on the given size information.
            </summary>
            <param name="preferedSize">A size value used to calculate the text size.</param>
            <param name="graphics">The graphics context.</param>
            <returns>Returns the size of the text.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonDrawingHelper.Image">
            <summary>
            Gets the image that is displayed on a button control based on the state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonDrawingHelper.ImageForeColor">
            <summary>
            Gets a image fore color value based on the button state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonDrawingHelper.BackgroundBrush">
            <summary>
            Gets a <see cref="T:Syncfusion.WinForms.Core.BrushInfo"/> based on the current button state.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.ButtonDrawingHelper.Border">
            <summary>
            Gets a border value based on the current button state.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.SfButton">
            <summary>
            Represents a button control with advanced customization options on background, text, border and image, etc.
            </summary>
            <example> 
            This example shows how to initialize the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            <code lang="C#">       
            //Initializing new instance of the SfButton.
            SfButton sfButton1 = new SfButton();
            //Initialize the location for the SfButton.
            sfButton1.Location = new System.Drawing.Point(348, 71);
            //Initialize the name of the SfButton.
            sfButton1.Name = "sfButton1";
            //Initialize the size of the SfButton.
            sfButton1.Size = new System.Drawing.Size(94, 30);
            //Initialize the text value of the SfButton.
            sfButton1.Text = "sfButton1";
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.updateCount">
            <summary>
            The value contains the update count.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.allowRichText">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowRichText"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.textMargin">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.TextMargin"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.drawHelper">
            <summary>
            A instance of the <see cref="T:Syncfusion.WinForms.Controls.ButtonDrawingHelper"/> used to draw the button control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.state">
            <summary>
            Specifies the current state the button control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.showToolTip">
            <summary>
            Specifies whether the tool tip has shown on the button.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.textToolTip">
            <summary>
            The text tool tip value that can be used to draw on the button.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.allowWrapText">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowWrapText"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.imageMargin">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.ImageMargin"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.imageSize">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.ImageSize"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.allowImageAnimation">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.isAnimating">
            <summary>
            Indicating whether image has currently animating on the button control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.imageLayout">
            <summary>
            It contains the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.ImageLayout"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.style">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.Style"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.focusRectangleVisible">
            <summary>
            It stores the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.FocusRectangleVisible"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.themeName">
            <summary>
            It contains the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.ThemeName"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.visualTheme">
            <summary>
            It contains the value of the VisualTheme property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.canApplytheme">
            <summary>
            It contains the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.CanApplyTheme"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.canOverrideStyle">
            <summary>
            It contains the value of the <see cref="P:Syncfusion.WinForms.Controls.SfButton.CanOverrideStyle"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfButton.baseThemeName">
            <summary>
            It contains the value of the <see cref="P:Syncfusion.WinForms.Theme.IThemeProvider.BaseThemeName"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> class.
            </summary>
            <remarks>
            The constructor initializes the created button with default settings. 
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched.
            </summary>
            <param name="m">The message to be dispatched. You cannot modify this message.</param>
            <returns>true to filter the message and stop it from being dispatched; false to allow
            the message to continue to the next filter or control.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.BeginUpdate">
            <summary>
            Suspends the painting of the control until the <see cref="M:Syncfusion.WinForms.Controls.SfButton.EndUpdate"/> method is called.
            </summary>
            <example>
            <code lang="C#">
            //Suspend updating the button.
            sfButton1.BeginUpdate();
            //Initialize styles changes to the button.
            sfButton1.Style.BackColor = Color.Gray;
            sfButton1.Style.ForeColor = Color.Black;
            //Resume updating the button and update the above changes.
            sfButton1.EndUpdate();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.EndUpdate">
            <summary>
            Resumes the painting of the control suspended by calling the BeginUpdate method.
            </summary>
            <example>
            <code lang="C#">
            //Suspend updating the button.
            sfButton1.BeginUpdate();
            //Initialize styles changes to the button.
            sfButton1.Style.BackColor = Color.Gray;
            sfButton1.Style.ForeColor = Color.Black;
            //Resume updating the button and update the above changes.
            sfButton1.EndUpdate();
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.GetActiveThemeName">
            <summary>
            Gets the active theme name of the button control.
            </summary>
            <returns>Returns the active theme name.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnFrameChanged(System.Object,System.EventArgs)">
            <summary>
            Invalidate the control when animation image frame change.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">A <see cref="T:System.EventArgs"/> contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.RefreshControl">
            <summary>
            Forces the control to invalidate its client area when updateCount value is less than or equal to zero.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.GetShowFocusCues">
            <summary>
            Gets a value indicating whether the control should display focus rectangles.
            </summary>
            <returns>True if the control should display focus rectangles; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used by the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> class.
            </summary>
            <param name="disposing">
            True to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnMouseEnter(System.Windows.Forms.EventArgs)"/> event.
            </summary>
            <param name="eventArgs">An <see cref="T:System.Windows.Form.EventArgs"/>that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnMouseLeave(System.Windows.Forms.EventArgs)"/> event.
            </summary>
            <param name="eventArgs">An <see cref="T:System.Windows.Form.EventArgs"/>that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/> event.
            </summary>
            <param name="eventArgs">An <see cref="T:System.Windows.Form.MouseEventArgs"/>that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/> event.
            </summary>
            <param name="eventArgs">An <see cref="T:System.Windows.Form.MouseEventArgs"/>that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)"/> event.
            </summary>
            <param name="eventArgs">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)"/> event.
            </summary>
            <param name="eventArgs">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override the method to draw the customized button. If the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> 
            is not customized then raises the <see cref="M:System.Windows.Forms.ButtonBase.OnPaint"/> method.
            </summary>
            <param name="eventArgs">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.CreateAccessibilityInstance">
            <summary>
            Overridden to update the accessibility object for the SfButton.
            </summary>
            <returns>Returns the accessibility object for the SfButton.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.GetTextWithoutMnemonics(System.String)">
            <summary>
            Get the text value without the Mnemonics character.
            </summary>
            <param name="text">The text with mnemonics character.</param>
            <returns>Returns the text without mnemonics character.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.StartAnimation">
            <summary>
            Begin the animation of the animated image.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.TextToolTip_ToolTipShowing(System.Object,Syncfusion.WinForms.Controls.Events.ToolTipShowingEventArgs)">
            <summary>
            Occurs before a ToolTip is initially displayed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinForms.Controls.Events.ToolTipShowingEventArgs"/> contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.ShouldSerializeImageSize">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.SfButton.ImageSize"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.GetMouseInside">
            <summary>
            Gets the boolean value indicating whether the mouse point is inside the button control.
            </summary>
            <returns>Returns true if the mouse point inside the button, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfButton.RaiseThemeChanged(System.Object,Syncfusion.Windows.Forms.Events.ThemeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinForms.Theme.IThemeProvider.ThemeNameChanged"/> and <see cref="E:Syncfusion.WinForms.Controls.SfButton.ThemeChanged"/> event when theme name changed.
            </summary>
            <param name="sender">The sender value.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Events.ThemeChangedEventArgs"/> contains the event data.</param>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfButton.ThemeNameChanged">
            <summary>
            Occurs when theme name of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinForms.Controls.SfButton.ThemeChanged">
            <summary>
            Occurs when theme name of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.FocusRectangleVisible">
            <summary>
            Gets or sets a value indicating whether a dotted focus rectangle is displayed within the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/>
            when it has focus. The default value is false.
            </summary>
            <value>The <see cref="T:System.Boolean"/> value that specifies whether the dotted focus rectangle is displayed 
            within the SimpleButton when it has focus. The default value is <b>true</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Style">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> value used to customize the appearance of the button.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Font">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> value for the control. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
            <value>True if the control can respond to user interaction; otherwise, false. 
            The default value is <b>true</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.IsUpdating">
            <summary>
            Gets a value indicating whether the BeginUpdate() has been called and the painting for a control is suspended.
            </summary>
            <value>True if the control is currently updating, otherwise false.
            </value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.BackColor">
            <summary>
            Gets or sets the background color of the button control.
            </summary>
            <remarks>
            This color has filled to background of the button only when set the
            <see cref="!:GradientStyle"/> property to 
            GradientStyle.None or <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.GradientBrush"/> property to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.ForeColor">
            <summary>
            Gets or sets the foreground color of the button control.
            </summary>
            <value> 
            A <see cref="T:System.Drawing.Color"/> value representing the foreground color of the control.
            </value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Text">
            <summary>
            Gets or sets the text to be displayed on the button.
            </summary>
            <remarks>
            Changing this property's value at runtime raises the TextChanged event.
            If the <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowRichText"/> property is set to true, can use the
            rich text value to show the button caption.
            </remarks>
            <value>A string value representing the button's caption.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.AllowRichText">
            <summary>
            Gets or sets a value indicating whether the rich text has been displayed on the button.
            </summary>
            <value><b>True</b>, if the current button caption can show the rich text, otherwise <b>false</b>.
            The default value is <b>false</b>.</value>
            <remarks> The button will display the rich text only when set the <see cref="P:Syncfusion.WinForms.Controls.SfButton.Text"/> 
            value as rich text.
            </remarks>
            <example>
            <code lang="C#">
            //Initialize the AllowRichText property to true.
            sfButton1.AllowRichText = true;
            //Initialize the rich text value to button
            sfButton1.Text = "{\\rtf1\\ansi \\i This is boldText \\b Draw in the button}";
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.TextMargin">
            <summary>
            Gets or sets the margin of the text on the button control.
            </summary>
            <remarks>
            A <see cref="T:System.Windows.Forms.Padding"/> representing the space between text and image or border of the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.AutoEllipsis">
            <summary>
            Gets or sets a value indicating whether the ellipsis character (...) appears at the right edge of the 
            control, denoting that the control text extends beyond the specified length of the control.
            </summary>
            <value>True if the additional label text is to be indicated by an ellipsis; otherwise,
            false. The default is true.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.AllowWrapText">
            <summary>
            Gets or sets a value indicating whether the text has been wrapped on the button control.
            </summary>
            <value>
            True if the text should wrap to the available layout rectangle otherwise, false.
            Default value is false.
            </value>
            <remarks>
            The text will be wrapped only when the <see cref="P:Syncfusion.WinForms.Controls.SfButton.AutoSize"/> is false.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Padding">
            <summary>
            Gets or sets the padding within the button control.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.Padding"/> representing the control's internal spacing characteristics.
            </value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.AutoSize">
            <summary>
            Gets or sets a value that indicates whether the button resizes based on its contents.
            The default value is false.
            </summary>
            <value>true if the control automatically resizes based on its contents; otherwise,
            false. The default is true.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.UseCompatibleTextRendering">
            <summary>
            Gets a value indicating whether to use the <see cref="T:System.Drawing.Graphics"/> class (GDI+) to rendering text. 
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control does not provide support the GDI drawing.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.ImageSize">
            <summary>
            Gets or sets the size of the image that will be displayed on the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.ImageMargin">
            <summary>
            Gets or sets the margin of the image on the button control.
            </summary>
            <remarks>
            A <see cref="T:System.Windows.Forms.Padding"/> representing the space between image and text or border of the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Image">
            <summary>
            Gets or sets the image that is displayed on a button control. 
            The default value is null.
            </summary>
            <value>An <see cref="T:System.Drawing.Image"/> object representing the image to be displayed on the button.
            The default value is <b>null</b>.</value>
            <remarks>
            <para>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> allows to animate,
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.SfButton.Image"/> property and enable the 
            <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property is true.
            </para>
            <para>
            The button's image can also be specified using the ImageList and ImageIndex properties.
            Assign an image collection to the button's ImageList property and then use the ImageIndex property 
            to specify the index of the image to display.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation">
            <summary>
            Gets or sets a value indicating whether the image has been animate in the button.
            </summary>
            <value>
            If true, the button allows to animate the image, otherwise it does not allow the button animate the image.
            The default value is <br>true</br>.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> allows to animate
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.SfButton.Image"/> property.        
            Other images like <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverImage"/>,
            <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedImage"/>, 
            <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedImage"/> and 
            <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledImage"/> images are not allow to animate. 
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.ImageList">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.ImageList"/> that contains the <see cref="T:System.Drawing.Image"/> 
            displayed on a button control.
            </summary>
            <value>The default value is <b>null</b>.</value>
            <remarks>After assign an image source to the ImageList property, use the ImageIndex property to specify 
            the image to be displayed within the button.</remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.ImageLayout">
            <summary>
            Gets or sets the image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout"/> enumeration
            used to draw the image within the button.
            </summary>
            <value>The default value is <b>ImageLayout.None</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.FlatAppearance">
            <summary>
            Gets the appearance of the border and the colors used to indicate check state and mouse state.        
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.TextImageRelation">
            <summary>
            Gets or sets the position of text and image relative to each other.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.TextImageRelation"/> enumeration that specifies how the button's
            image is aligned relative to the button's text. The default value is <b>TextImageRelation.ImageBeforeText</b>
            </value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.AccessibilityEnabled">
            <summary>
            Gets or sets a value indicating whether the accessibility is enabled for the control or not.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.CanApplyTheme">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/> theme style 
            has been applied to the control.
            </summary>
            <value>The default value is <b>true</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.ThemeName">
            <summary>
            Gets or sets the theme name of the button control.
            </summary>
            <value> 
            The default value is null.
            </value>
            <remarks>
            The theme will be applied only when the particular theme for this control has included the Themes assembly.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.CanOverrideStyle">
            <summary>
            Gets or sets a value indicating whether control elements styles can be overridden by theme style settings.
            </summary>
            <value>Default value is false.</value>
            <remarks>
            By default, the control's element styles will not be overridden by theme style settings if the style is set in sample level. 
            If this property is enabled, element style will be overridden by theme style settings event if it is set in sample level.
            This property should be enabled or disabled before calling the ThemeName property of the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.ControlName">
            <summary>
            Gets the name of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Syncfusion#WinForms#Theme#IThemeProvider#BaseThemeName">
            <summary>
            Gets or sets the BaseThemeName of the theme
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.Syncfusion#Windows#Forms#IVisualStyle#VisualTheme">
            <summary>
            Gets or sets the VisualTheme of the SfListView control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.IsAltPressed">
            <summary>
            Gets or sets a value indicating whether the alt key has been pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.IsDesignMode">
            <summary>
            Gets a value indicating whether the button control is currently in design mode.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.State">
            <summary>
            Gets or sets a current state of the button control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.BaseThemeName">
            <summary>
            Gets or sets the BaseThemeName of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.VisualTheme">
            <summary>
            Gets or sets the visualTheme of the control, which holds the ThemeName applied from SkinManager
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.DefaultSize">
            <summary>
            Returns the default size of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfButton.IsVisualStyleEnabled">
            <summary>
            Gets a value indicating whether the visual style based theme is applied to the control and
            also indicates whether the theme files are referred from external assemblies or not.
            </summary>
            <value>Return true, if the visual style based theme is applied to the control. Otherwise returns false.</value>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore">
            <summary>
            Provides storage for the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.ForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PressedForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.FocusdForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.HoverForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.DisabledForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.BackColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.BackColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PressedBackColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBackColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.FocusedBackColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBackColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.HoverBackColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBackColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.DisabledBackColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBackColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.GradientBrushProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.GradientBrush"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PressedGradientBrushProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedGradientBrush"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.HoverGradientBrushProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverGradientBrush"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.DisabledGradientBrushProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledGradientBrush"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.FocusedGradientBrushProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedGradientBrush"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.BorderProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Border"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PressedBorderProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBorder"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.FocusedBorderProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBorder"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.HoverBorderProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBorder"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.DisabledBorderProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBorder"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PaddingProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Padding"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.ImageProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Image"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.HoverImageProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverImage"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PressedImageProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedImage"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.FocusedImageProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedImage"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.DisabledImageProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledImage"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.ImageForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ImageForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.HoverImageForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverImageForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PressedImageForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedImageForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.FocusedImageForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedImageForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.DisabledImageForeColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledImageForeColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.BorderColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.BorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.PressedBorderColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.FocusedBorderColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.HoverBorderColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.DisabledBorderColorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBorderColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.staticData">
            <summary>
            It contains the value of the <see cref="!:Syncfusion.WinForms.Styles.ButtonStyleInfoStore.StaticDataStore"/> property value.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore"/> class from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.GetStaticData">
            <summary>
            Initializes the <see cref="T:Syncfusion.Styles.StaticData"/>, if <see cref="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.staticData"/> is null.
            </summary>
            <returns><see cref="T:Syncfusion.Styles.StaticData"/></returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore.StaticDataStore">
            <summary>
            Gets the static data value of the <see cref="!:Syncfusion.WinForms.Controls.Style.ButtonStyleInfoStore"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle">
            <summary>
            Represents the class to define the style for <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.defaultStyle">
            <summary>
            It contains the value of the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DefaultStyle"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> class.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity"/> that holds the identity for this <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore"/>.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> class.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity"/> that holds the identity for this <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoStore"/>.</param>
            <param name="store">The store.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.GetDefaultStyle">
            <summary>
            Gets the default style value of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> class.
            </summary>
            <returns>Returns the default style value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeBackColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.BackColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeHoverBackColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBackColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeFocusedBackColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBackColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializePressedBackColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBackColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeDisabledBackColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBackColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeHoverForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeFocusedForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializePressedForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeDisabledForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeImageForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ImageForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeHoverImageForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ImageForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializePressedImageForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedImageForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeFocusedImageForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedImageForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ShouldSerializeDisabledImageForeColor">
            <summary>
            Determines a value indicating whether to serialize <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledImageForeColor"/> property.
            </summary>
            <returns><b>True</b> if the property was modified; Otherwise <b>False</b>.</returns>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DefaultStyle">
            <summary>
            Gets the default style value for the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.BackColor">
            <summary>
            Gets or sets the background color of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to fill the background of the button.</value>
            <remarks>
            This color has filled to background of the button only when set the
            <see cref="!:Syncfusion.WinForms.Controls.SfButton.Style.GradientBrush"/> property to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBackColor">
            <summary>
            Gets or sets the background color of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in pressed state.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to fill the background of the button.</value>
            <remarks>
            This color has filled to background of the button only when set the
            <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedGradientBrush"/> property to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBackColor">
            <summary>
            Gets or sets the background color of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in mouse hover state.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to fill the background of the button.</value>
            <remarks>
            This color has filled to background of the button only when set the
            <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverGradientBrush"/> property to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBackColor">
            <summary>
            Gets or sets the fore color of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in focused state.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to fill the background of the button.</value>
            <remarks>
            This color has filled to background of the button only when set the
            <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedGradientBrush"/> property to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBackColor">
            <summary>
            Gets or sets the background color of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in the disabled state.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to fill the background of the button.</value>
            <remarks>
            This color has filled to background of the button only when set the
            <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledGradientBrush"/> property to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ForeColor">
            <summary>
            Gets or sets the fore color value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the text of the button.</value>
            <remarks>
            The text will draw on the button by using this color value, when the button state is default.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedForeColor">
            <summary>
            Gets or sets the fore color value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in pressed state 
            </summary>
            <remarks>
            The text will draw on the button by using this color value, when the button state is pressed.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedForeColor">
            <summary>
            Gets or sets the fore color value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in focused state.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the text of the button.</value>
            <remarks>
            The text will draw on the button by using this color value, when the button state is focused.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverForeColor">
            <summary>
            Gets or sets the fore color value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in hover state.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the text of the button.</value>
            <remarks>
            The text will draw on the button by using this color value, when the button state is hover.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledForeColor">
            <summary>
            Gets or sets the fore color value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in disabled state.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the text of the button.</value>
            <remarks>
            The text will draw on the button by using this color value, when the button state is disabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.GradientBrush">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Core.BrushInfo"/> used to fill the background 
            of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in default state.
            The default value is null.
            </summary>
            <remarks>
            If this value is null, the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.BackColor"/>
            is used to fill the background of the button in default state.
            </remarks>      
            <example>
            This example shows how to initialize the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.GradientBrush"/> property.
            <code lang="C#">
            // Initialize the gradient brush value to SfButton.
            sfButton1.Style.GradientBrush = new Syncfusion.WinForms.Core.BrushInfo(Syncfusion.WinForms.Core.GradientStyle.BackwardDiagonal, new Color[] { Color.Red, Color.Green });
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedGradientBrush">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Core.BrushInfo"/> used to fill the background 
            of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in pressed state.
            The default value is null.
            </summary>
            <remarks>
            If this value is null, the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBackColor"/>
            is used to fill the background of the button in pressed state.
            </remarks>     
            <example>
            This example shows how to initialize the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedGradientBrush"/> property.
            <code lang="C#">
            // Initialize the pressed gradient brush value to SfButton.
            sfButton1.Style.PressedGradientBrush = new Syncfusion.WinForms.Core.BrushInfo(Syncfusion.WinForms.Core.GradientStyle.BackwardDiagonal, new Color[] { Color.Red, Color.Green });
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverGradientBrush">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Core.BrushInfo"/> used to fill the background 
            of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in hover state.
            The default value is null.
            </summary>
            <remarks>
            If this value is null, the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBackColor"/>
            is used to fill the background of the button in hover state.
            </remarks>
            <example>
            This example shows how to initialize the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverGradientBrush"/> property.
            <code lang="C#">
            // Initialize the hover gradient brush value to SfButton.
            sfButton1.Style.HoverGradientBrush = new Syncfusion.WinForms.Core.BrushInfo(Syncfusion.WinForms.Core.GradientStyle.BackwardDiagonal, new Color[] { Color.Red, Color.Green });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedGradientBrush">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Core.BrushInfo"/> used to fill the background 
            of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in focused state.
            The default value is null.
            </summary>
            <remarks>
            If this value is null, the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBackColor"/>
            is used to fill the background of the button in focused state.
            </remarks>
            <example>
            This example shows how to initialize the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedGradientBrush"/> property.
            <code lang="C#">
            // Initialize the focused gradient brush value to SfButton.
            sfButton1.Style.FocusedGradientBrush = new Syncfusion.WinForms.Core.BrushInfo(Syncfusion.WinForms.Core.GradientStyle.BackwardDiagonal, new Color[] { Color.Red, Color.Green });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledGradientBrush">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinForms.Core.BrushInfo"/> used to fill the background 
            of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in disabled state.
            The default value is null.
            </summary>
            <remarks>
            If this value is null, the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBackColor"/>
            is used to fill the background of the button in disabled state.
            </remarks>
            <example>
            This example shows how to initialize the <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledGradientBrush"/> property.
            <code lang="C#">
            // Initialize the disabled gradient brush value to SfButton.
            sfButton1.Style.DisabledGradientBrush = new Syncfusion.WinForms.Core.BrushInfo(Syncfusion.WinForms.Core.GradientStyle.BackwardDiagonal, new Color[] { Color.Red, Color.Green });
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Border">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> value used to draw the border of the 
            <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in default state.
            </summary>
            <value>The <see cref="T:System.Drawing.Pen"/> value is used to draw the border of the button.
            The default value is null.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBorder">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> value used to draw the border of the 
            <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in pressed state.
            </summary>
            <value>The <see cref="T:System.Drawing.Pen"/> value is used to draw the border of the button.
            The default value is null.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBorder">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> value used to draw the border of the 
            <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in hover state.
            </summary>        
            <value>The <see cref="T:System.Drawing.Pen"/> value is used to draw the border of the button.
            The default value is null.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBorder">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> value used to draw the border of the 
            <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in disabled state.
            </summary>
            <value>The <see cref="T:System.Drawing.Pen"/> value is used to draw the border of the button.
            The default value is null.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBorder">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> value used to draw the border of the 
            <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control in focused state.
            </summary>
            <value>The <see cref="T:System.Drawing.Pen"/> value is used to draw the border of the button.
            The default value is null.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Image">
            <summary>
            Gets or sets the image that is displayed on a button control in default state.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> value used to displayed on the button. The default value is null.</value>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> allows to animate,
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Image"/> property and enable the 
            <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property is true.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverImage">
            <summary>
            Gets or sets the image that is displayed on a button control in hover state.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> value used to displayed on the button. The default value is null.</value>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> does not allows to animate,
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverImage"/> property and even the 
            <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property is true. If the <see cref="P:Syncfusion.WinForms.Controls.SfButton.Image"/>
            property is animated GIF file then this property not used in button.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedImage">
            <summary>
            Gets or sets the image that is displayed on a button control in pressed state.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> value used to displayed on the button. The default value is null.</value>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> does not allows to animate,
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedImage"/> property and even the 
            <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property is true. If the <see cref="P:Syncfusion.WinForms.Controls.SfButton.Image"/>
            property is animated GIF file then this property not used in button.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedImage">
            <summary>
            Gets or sets the image that is displayed on a button control in focused state.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> value used to displayed on the button. The default value is null.</value>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> does not allows to animate,
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedImage"/> property and even the 
            <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property is true. If the <see cref="P:Syncfusion.WinForms.Controls.SfButton.Image"/>
            property is animated GIF file then this property not used in button.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledImage">
            <summary>
            Gets or sets the image that is displayed on a button control in disabled state.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> value used to displayed on the button. The default value is null.</value>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> does allows to animate,
            when set the animated GIF file to <see cref="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledImage"/> property and even the 
            <see cref="P:Syncfusion.WinForms.Controls.SfButton.AllowImageAnimation"/> property is true. If the <see cref="P:Syncfusion.WinForms.Controls.SfButton.Image"/>
            property is animated GIF file then this property not used in button.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.ImageForeColor">
            <summary>
            Gets or sets the fore color of the image that will be displayed on the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/>
            control in default state.
            </summary>        
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the image. The default value is 
            <b>Color.Empty</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverImageForeColor">
            <summary>
            Gets or sets the fore color of the image that will be displayed on the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/>
            control in hover state.
            </summary>        
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the image. The default value is 
            <b>Color.Empty</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedImageForeColor">
            <summary>
            Gets or sets the fore color of the image that will be displayed on the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/>
            control in pressed state.
            </summary>       
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the image. The default value is 
            <b>Color.Empty</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedImageForeColor">
            <summary>
            Gets or sets the fore color of the image that will be displayed on the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/>
            control in focused state. 
            </summary>        
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the image on focused state of the button.
            The default value is <b>Color.Empty</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledImageForeColor">
            <summary>
            Gets or sets the fore color of the image that will be displayed on the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/>
            control in disabled state. 
            </summary>   
            <value>The <see cref="T:System.Drawing.Color"/> value is used to draw the image. The default value is 
            <b>Color.Empty</b>.</value>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.Padding">
            <summary>
            Gets or sets the Padding value of the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HasPadding">
            <summary>
            Gets a value indicating whether padding has been initialized for the <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HasHoverImage">
            <summary>
            Gets a value indicating whether the Image property has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HasImage">
            <summary>
            Gets a value indicating whether the Image property has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HasPressedImage">
            <summary>
            Gets a value indicating whether the PressedImage property has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HasFocusedImage">
            <summary>
            Gets a value indicating whether the FocusedImage property has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HasDisabledImage">
            <summary>
            Gets a value indicating whether the DisabledImage property has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.BorderColor">
            <summary>
            Gets or sets color of the border
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.HoverBorderColor">
            <summary>
            Gets or sets hover color of the border
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.PressedBorderColor">
            <summary>
            Gets or sets pressed color of the border
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.FocusedBorderColor">
            <summary>
            Gets or sets focused color of the border
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle.DisabledBorderColor">
            <summary>
            Gets or sets disabled color of the border
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity">
            <summary>
            Implements the class that provide the identity information of <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> 
            using <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity.sfButton">
            <summary>
             Maintains the SfDataGrid for create the identity. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity.#ctor(Syncfusion.WinForms.Controls.SfButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity"/> class.
            </summary>
            <param name="button">
            <see cref="T:Syncfusion.WinForms.Controls.SfButton"/> to create an identity.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Loops through all base styles until it finds a style that has a specific property initialized.
            </summary>
            <param name="thisStyleInfo">A instance of <see cref="T:Syncfusion.Styles.IStyleInfo"/></param>
            <returns>
            Returns the <see cref="T:Syncfusion.Styles.IStyleInfo"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.Styles.ButtonStyleInfoIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs when a property in the <see cref="T:Syncfusion.WinForms.Controls.Styles.ButtonVisualStyle"/> has changed.
            </summary>
            <param name="style">The <see cref="M:Syncfusion.Styles.StyleInfoBase.#ctor"/> instance that has changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Core.CheckBoxPainter">
            <summary>
            Represents the static class the contains the methods for painting the checkbox.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.CheckBoxPainter.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.CheckState,Syncfusion.Styles.CheckBoxStyleInfoBase)">
            <summary>
            Draws the check box for the cell.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> that used to draw the check box.</param>
            <param name="checkBoxBounds">The bounds of the check box.</param>
            <param name="state">The state of the check box.</param>
            <param name="checkBoxStyle">The style for the check box.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.CheckBoxPainter.GetCheckBoxSize(Syncfusion.Styles.CheckBoxStyleInfoBase)">
            <summary>
            Get the checkbox size based on the given <see cref="T:Syncfusion.Styles.CheckBoxStyleInfoBase"/> value.
            </summary>
            <param name="checkBoxStyle">The <see cref="T:Syncfusion.Styles.CheckBoxStyleInfoBase"/> value.</param>
            <returns>Returns the checkbox size.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.ImagePainter">
            <summary>
            Represents a class that provides the various options for drawing the images and icons.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.ImagePainter.bitmaps">
            <summary>
            The bitmap cache.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.ImagePainter.manifestPrefix">
            <summary>
            The manifest to load from. The bitmaps should be saved in the Resources
            tree in the Visual Studio project with the build action set to "Embedded Resource".
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.ImagePainter.assembly">
            <summary>
            The assembly to load from. The bitmaps should be saved in the Resources
            tree in Visual Studio project with the build action set to "Embedded Resource".
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.ImagePainter"/> class, with manifestPrefix and a reference to the assembly
            to load bitmaps from.
            </summary>
            <param name="manifestPrefix"> The manifest to load from. The bitmaps should be saved in the Resources
            tree in the Visual Studio project with the build action set to "Embedded Resource".</param>
            <param name="ass">The assembly to load from. The bitmaps should be saved in the Resources
            tree in Visual Studio project with the build action set to "Embedded Resource".</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Paints the bitmap by substituting black pixels with a new color.
            </summary>
            <param name="graphics">A graphics object used to draw the bitmap.</param>
            <param name="bounds">A rectangle which contains the boundary data.</param>
            <param name="offset">A point that specifies pixels to offset the bitmap from its origin point.</param>
            <param name="bmp">The bitmap to be drawn on the screen.</param>
            <param name="newColor">The new color used to substitute black pixels.</param>
            <returns>Returns a rectangle which contains the boundary data of the drawn bitmap.</returns>        
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Paints the bitmap by substituting old color with a new color.
            </summary>
            <param name="graphics">A graphics object used to draw the bitmap.</param>
            <param name="bounds">A rectangle which contains the boundary data.</param>
            <param name="offset">A point that specifies pixels to offset the bitmap from its origin point.</param>
            <param name="bmp">The bitmap to be drawn on the screen.</param>
            <param name="newColor">The new color used to substitute old color.</param>
            <param name="oldColor">The old color value.</param>
            <returns>A rectangle which contains the boundary data of the drawn bitmap.</returns>        
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Windows.Forms.ImageLayout,System.Drawing.Rectangle,System.Drawing.Point,System.Windows.Forms.RightToLeft)">
            <summary>
            Draws the image on the given graphics based on the image layout type and rectangle values.
            </summary>
            <param name="graphics">A graphics object used to draw the image.</param>
            <param name="image">A image used to draw on the graphics.</param>
            <param name="imageLayout">Image layout of the image to draw.</param>
            <param name="clientRect">A rectangle area where need to draw the image.</param>
            <param name="offset">The offset value used to adjust the image location.</param>
            <param name="rightToLeft">A boolean value indicates the right to left mode.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Windows.Forms.ImageLayout,System.Drawing.Rectangle,System.Drawing.Point,System.Windows.Forms.RightToLeft,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws the image on the given graphics based on the image layout type, rectangle and image attribute values.
            </summary>
            <param name="graphics">A graphics object used to draw the image.</param>
            <param name="image">A image value.</param>
            <param name="imageLayout">Image layout of the image.</param>
            <param name="clientRect">A rectangle area where need to draw the image.</param>
            <param name="offset">The offset value.</param>
            <param name="rightToLeft">A boolean value indicates the right to left mode.</param>
            <param name="imageAttributes">A image attribute value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>Draws the grayed image at the specified coordinates.</summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="left">The integer value indicates the left position of the image.</param>
            <param name="top">The integer value indicates the top position of the image.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32,System.Single)">
            <summary>Draws the image based on the greyScale value.</summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="left">The integer value indicates the left position of the image.</param>
            <param name="top">The integer value indicates the top position of the image.</param>
            <param name="grayScale">The float value indicates the gray scale value of the image.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>Draws the grayed image from source rectangle to destination rectangle.</summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="destRect">The destination rectangle.</param>
            <param name="srcRect">The source rectangle.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.RectangleF,System.Single)">
            <summary>Draws the grayed image from source rectangle to destination rectangle based on the gray Scale value.</summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="destRect">The destination rectangle.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="grayScale">The gray scale value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawTransparentImage(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Image,System.Single)">
            <summary>Draws the transparent image at specified position based on the transparency value.</summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="point">A <see cref="T:System.Drawing.Point"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="transparency">A transparency value. The transparency should be in the range 0 to 1.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawTransparentImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Single)">
            <summary>Draws the transparent image at specified rectangle based on the transparency value.</summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="transparency">A transparency value. The transparency should be in the range 0 to 1.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawShadowImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Int32,Syncfusion.WinForms.Core.Enums.ShadowOption)">
            <summary>
            Draws the image with shadow at specified coordinates based on the shadowScale and shadowOffset values.
            </summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="rectange">A <see cref="T:System.Drawing.Rectangle"/> context.</param>
            <param name="shadowScale">A shadow scale value used to specify the shadow level.The shadowScale should be in the range 0 to 1.</param>
            <param name="shadowOffset">A shadow offset value. This value is must be greater than zero.</param>
            <param name="options">A <see cref="T:Syncfusion.WinForms.Core.Enums.ShadowOption"/> value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawShadowImage(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,Syncfusion.WinForms.Core.Enums.ShadowOption)">
            <summary>Draws the image with shadow at specified coordinates based on the shadowScale and shadowOffset values.
            </summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="x">The integer value indicates the left position of the image.</param>
            <param name="y">The integer value indicates the top position of the image.</param>
            <param name="width">The integer value indicates the width of the image.</param>
            <param name="height">The integer value indicates the height of the image.</param>
            <param name="shadowScale">A shadow scale value used to specify the shadow level.The shadow scale should be in the range 0 to 1.</param>
            <param name="shadowOffset">A shadow offset value.</param>
            <param name="options">A <see cref="T:Syncfusion.WinForms.Core.Enums.ShadowOption"/> specifies options to draw shadow.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawShadowImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Point,System.Single,System.Int32,Syncfusion.WinForms.Core.Enums.ShadowOption)">
            <summary>
            Draws the image with shadow at specified position based on the shadowScale and shadowOffset values.
            </summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> context.</param>
            <param name="point">A point value holds the image location.</param>
            <param name="shadowScale">A shadow scale value used to specify the shadow level.The shadowScale should be in the range 0 to 1.</param>
            <param name="shadowOffset">A shadow offset value.</param>
            <param name="options">A <see cref="T:Syncfusion.WinForms.Core.Enums.ShadowOption"/> specifies options to draw shadow.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawRotatedImage(System.Drawing.Graphics,System.Drawing.Bitmap,System.Single,System.Drawing.Rectangle)">
            <summary>
            Draws the rotated image at specified location based on the angle information.
            </summary>
            <param name="gr">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> context.</param>
            <param name="angle">A angle value.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawIcon(System.IntPtr,System.Drawing.Icon,System.Drawing.Rectangle)">
            <summary>
            Draws the image represented by the specified <see cref="T:System.Drawing.Icon"/> within the area
            specified by a <see cref="T:System.Drawing.Rectangle"/> structure.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="icon">A <see cref="T:System.Drawing.Icon"/> context.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> context.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImage(System.IntPtr,System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Draws an image to graphics context using the native methods.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="image">A <see cref="T:System.Drawing.Image"/> value.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> context.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImageFromImageList(System.IntPtr,System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws an image from the <see cref="T:System.Windows.Forms.ImageList"/> based on the specified index.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="imageList">The <see cref="T:System.Windows.Forms.ImageList"/> containing the images.</param>
            <param name="index">The index of the image.</param>
            <param name="rect">The rectangle into which to draw.</param>        
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetBitmap(System.String)">
            <summary>
            Gets a bitmap from cache or loads bitmap from manifest on first use.
            </summary>
            <param name="bitmapName">The bitmap name.</param>
            <returns>Reference to bitmap; NULL if bitmap failed to load.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.String,System.Drawing.Color)">
            <summary>
            Loads the bitmap from the manifest and paints it by substituting black pixels with a new color.
            </summary>
            <param name="graphics">A graphics object used to draw the bitmap.</param>
            <param name="bounds">A rectangle which contains the boundary data.</param>
            <param name="offset">A point that specifies pixel to offset the bitmap from its origin point.</param>
            <param name="bitmapName">The name of the bitmap.</param>
            <param name="newColor">The new color used to substitute black pixels.</param>     
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Loads the bitmap from the manifest and paints it by substituting old color with a new color.
            </summary>
            <param name="graphics">A graphics object used to draw the bitmap.</param>
            <param name="bounds">A rectangle which contains the boundary data.</param>
            <param name="offset">A point that specifies pixel to offset the bitmap from its origin point.</param>
            <param name="bitmapName">The name of the bitmap.</param>
            <param name="newColor">The new color used to substitute black pixels.</param>
            <param name="oldColor">The old color value.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.CalculateImageBounds(System.Drawing.Rectangle,System.Drawing.Image,System.Windows.Forms.ImageLayout)">
            <summary>
            Calculates rectangle to draw on it image, depending on imageLayout.
            </summary>  
            <param name="bounds">A rectangle value used to calculate the image bounds.</param>
            <param name="image">A image used to calculate the bounds.</param>
            <param name="imageLayout">Image layout of the image.</param>
            <returns>Returns a rectangle value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetRotatedImage(System.Drawing.Bitmap,System.Single)">
            <summary>
            Returns the rotated image based on the angle information.
            </summary>
            <param name="bitmap">The bitmap image which need to rotate.</param>
            <param name="angle">The rotation angle.</param>
            <returns>Returns the rotated image</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetShadowLocation(System.Drawing.Rectangle,Syncfusion.WinForms.Core.Enums.ShadowOption,System.Int32)">
            <summary>
            Calculates the shadow location based on the rectangle, shadow offset and shadow option values.
            </summary>
            <param name="location">The rectangle value used to calculate the shadow rectangle.</param>
            <param name="options">The ShadowOption used to calculate the shadow rectangle.</param>
            <param name="shadowOffset">The integer value used to initialize the shadow width.</param>
            <returns>Returns the calculated shadow location.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetShadowMatrix(System.Single)">
            <summary>
            Calculates the color matrix value based on the shadow scale value.
            </summary>
            <param name="shadowScale">The value indicates the shadow scale.</param>
            <returns>Returns the color matrix value based on the shadow scale value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetTransparentMatrix(System.Single)">
            <summary>
            Calculates the transparent color matrix value based on the shadow scale.
            </summary>
            <param name="transparency">The value used to calculate the transparent matrix.</param>
            <returns>Returns the transparent color matrix value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetGrayScaleMatrix(System.Single)">
            <summary>
            Calculates the color matrix value based on the gray scale value.
            </summary>
            <param name="grayScale">The value is used to calculates the color matrix.</param>
            <returns>Returns the calculated color matrix value based on the gray scale value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetTextureBrush(System.Drawing.Image,System.Drawing.Point)">
            <summary>
            Creates a TextureBrush value for the image based on the offset value.
            </summary>
            <param name="image">The image used to create a texture brush.</param>
            <param name="offset">The offset value used to calculate </param>
            <returns>Returns the TextBrush value based on the image and offset value.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ImagePainter.GetCenterImageLayout(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Calculate the image rectangle value based on the ImageLayout.Center position.
            </summary>
            <param name="intersectRect">The intersect rectangle contains the original rectangle and client rectangle.</param>
            /// <param name="rectangle">The rectangle contains the original rectangle and client rectangle.</param>
            <returns>Returns the image rectangle value.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.RtlHelper">
            <summary>
            A helper class that provides the options for converting the actual rectangle to right to left mode rectangle.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.RtlHelper.GetRectangle(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Gets an equivalent rectangle value for the right to left mode.
            </summary>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> context.</param>
            <param name="size">The size value.</param>
            <returns>Returns the rectangle value for the RightToLeft mode.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.RtlHelper.GetRectangle(System.Drawing.Rectangle,System.Drawing.Size,System.Int32)">
            <summary>
            Gets an equivalent rectangle value for the right to left mode. Based on the offset value the right to left mode rectangle has calculated.
            </summary>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> context.</param>
            <param name="size">The size value.</param>
            <param name="offset">The offset value used to calculate the rectangle value for right to left mode.</param>
            <returns>Returns the rectangle value for right to left mode.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.ShapesPainter">
            <summary>
                Represents the functionalities that encapsulates the painting logic for a triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.ShapesPainter.TRI_HEIGHT_RATIO">
            <summary>
                Maintains the triangle's height ratio.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.ShapesPainter.TRI_WIDTH_RATIO">
            <summary>
                Maintains the triangle's width ratio.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ShapesPainter.DrawTriangle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.WinForms.Core.Enums.TriangleDirection,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary>
            Paints a triangle to a given graphics canvas.
            </summary>
            <param name="g">
            The <see cref="T:System.Drawing.Graphics"/> context of the canvas.
            </param>
            <param name="bounds">
            The <see cref="T:System.Drawing.Rectangle"/> with the bounds.
            </param>
            <param name="direction">
            The <see cref="T:Syncfusion.WinForms.Core.Enums.TriangleDirection"/> which indicates the sort order.
            </param>
            <param name="backBrush">
            Brush to paint the inner region of the triangle.
            </param>
            <param name="backPen">
            Pen to draw a triangle boundary.
            </param>
            <param name="opaque">
            Specifies if the triangle should be drawn transparent.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ShapesPainter.BuildTrianglePoints(Syncfusion.WinForms.Core.Enums.TriangleDirection,System.Drawing.Rectangle)">
            <summary>
            Creates the Triangle points.
            </summary>
            <param name="direction">
            Specifies the direction of Triangle.
            </param>
            <param name="bounds">
            The <see cref="T:System.Drawing.Rectangle"/> with the bounds.
            </param>
            <returns>
            Triangle points.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.ShapesPainter.OffsetPoints(System.Drawing.Point[],System.Int32,System.Int32)">
            <summary>
            Creates the Offset points.
            </summary>
            <param name="points">
            Array of triangle points.
            </param>
            <param name="xOffset">
            X-Co ordinate.
            </param>
            <param name="yOffset">
            Y-Co ordinate.
            </param>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.BusyIndicator">
            <summary>
            Represents a class that provides the animation for an image based on the time-based frames.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Utils.BusyIndicator.control">
            <summary>
            Specifies the control that needs to show the busy indicator. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Utils.BusyIndicator.canCalculateLocation">
            <summary>
            Specifies whether to calculate the location for the busy indicator or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Utils.BusyIndicator.canAnimate">
            <summary>
            Specifies whether the busy indicator needs to be shown or not.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Utils.BusyIndicator.displayLocation">
            <summary>
            Specifies the indicator display location at the attached control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Utils.BusyIndicator.displayImage">
            <summary>
            Specifies the image that needs to be displayed as the busy indicator.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Utils.BusyIndicator.imageLock">
            <summary>
            Specifies the object which helps to Lock the code to avoid exceptions.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Core.Utils.BusyIndicator"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Show(System.Windows.Forms.Control)">
            <summary>
            Shows the busy indicator for the given control.
            </summary>
            <param name="control">The control which needs to be display the busy indicator.</param>
            <remarks>By default, busy Indicator will be displayed at the center of the control until set the <see cref="P:Syncfusion.WinForms.Core.Utils.BusyIndicator.Location"/> property.</remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Show(System.Windows.Forms.Control,System.Drawing.Image)">
            <summary>
            Displays the busy indicator for the given control with the given image.
            </summary>
            <param name="control">The control which needs to be display the busy indicator.</param>
            <param name="image">The image which needs to be shown as the busy indicator.</param>
            <remarks>By default, busy Indicator will be displayed at the center of the control until set the <see cref="P:Syncfusion.WinForms.Core.Utils.BusyIndicator.Location"/> property.</remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Show(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Displays the busy indicator for the given control at the given location.
            </summary>
            <param name="control">The control which needs to be display the busy indicator.</param>
            <param name="location">The location of the busy Indicator.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Show(System.Windows.Forms.Control,System.Drawing.Image,System.Drawing.Point)">
            <summary>
            Displays the busy indicator for the given control based on the given image and location
            </summary>
            <param name="control">The control which needs to be display the busy indicator.</param>
            <param name="image">The image which needs to be shown as the busy indicator.</param>
            <param name="location">The location of the busy Indicator.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Hide">
            <summary>
            Hides the busy indicator for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Dispose">
            <summary>
            Releases all resources used by the BusyIndicator.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used by the <see cref="T:Syncfusion.WinForms.Core.Utils.BusyIndicator"/> class.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.Animate">
            <summary>
            Animates the image on the attached control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.OnAnimate(System.Object,System.EventArgs)">
            <summary>
            Occurs on the frequency of the updated frames.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.InvalidateControl(System.Object)">
            <summary>
            Draws the busy indicator for the attached control.
            </summary>
            <param name="sender">The object of the sender.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.BusyIndicator.OnControlSizeChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the attached controls size is change.
            </summary>
            <param name="sender">The object of the sender.</param>
            <param name="e">An <see cref="T:EventArgs"/> that contains event data.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Utils.BusyIndicator.Image">
            <summary>
            Gets or sets the image for the busy indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Utils.BusyIndicator.Location">
            <summary>
            Gets or sets the location of the busy indicator.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.BusyIndicator.InvalidateControlEventHandler">
            <summary>
            Specifies the delegate for drawing the busy indicator asynchronously.
            </summary>
            <param name="sender">The object of the sender.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.DisposeHelper">
            <summary>
            A helper class that provides the functionalities to dispose the object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.DisposeHelper.Dispose(System.Windows.Forms.ImageList@)">
            <summary>
            Releases the all resources that are used by the <see cref="T:System.Windows.Forms.ImageList"/> object.
            </summary>
            <param name="list">The <see cref="T:System.Windows.Forms.ImageList"/> that need to be disposed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.DisposeHelper.Dispose(System.Collections.IList@)">
            <summary>
            Releases the all resources that are used by the <see cref="T:System.Collections.IList"/> object.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.IList"/> that need to be disposed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.DisposeHelper.Dispose(System.Collections.IDictionary@)">
            <summary>
            Releases the all resources used by the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/> that need to be disposed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.DisposeHelper.Dispose(System.Windows.Forms.NativeWindow@)">
            <summary>
            Releases the all resources that are used by the <see cref="T:System.Windows.Forms.NativeWindow"/> object.
            </summary>
            <param name="window">The <see cref="T:System.Windows.Forms.NativeWindow"/> that need to be disposed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.DisposeHelper.Dispose(System.Collections.ArrayList@)">
            <summary>
            Releases the all resources that are used by the <see cref="T:System.Collections.ArrayList"/> object.
            </summary>
            <param name="collection">An <see cref="T:System.Collections.ArrayList"/> that need to be disposed.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.DisposeHelper.Dispose(System.Collections.Hashtable@)">
            <summary>
            Releases the all resources that are used by the <see cref="T:System.Collections.Hashtable"/> object.
            </summary>
            <param name="hashTable">The <see cref="T:System.Collections.Hashtable"/> that need to be disposed.</param>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.NullableHelper">
            <summary>
            A helper class that provides the functionalities for converting the object to the specified type. 
            This will return the null if the object cannot be converted to specified type.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.NullableHelper.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an object of the specified type whose value is equivalent to the specified object.
            </summary>
            <param name="value">The object that need to be convert.</param>
            <param name="type">The target <see cref="T:System.Type"/>. It can also be a <see cref="T:System.Nullable"/> type.</param>
            <returns>Returns the converted value as object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.NullableHelper.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Returns an object of the specified type whose value is equivalent to the specified object.
            </summary>
            <param name="value">The value that need to be converted to the target type.</param>
            <param name="type">The target <see cref="T:System.Type"/>.It can also be a <see cref="T:System.Nullable"/> type.</param>
            <param name="provider">The <see cref="T:System.IFormatProvider"/> object.</param>
            <returns>
            Returns null when the object is not converted to the target type otherwise return the converted value.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.NullableHelper.ChangeDbNullasNull(System.Object,System.Type)">
            <summary>
            Changes the DBNull object as null. 
            </summary>
            <param name="value">The object that need to be checked as the DBNull.</param>
            <param name="type">The target <see cref="T:System.Type"/> of the object.</param>
            <returns>
            Returns the DBNull object as null.
            </returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.NullableHelper.ChangeNonNullableType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Returns an object of the specified type whose value is equivalent to the specified object.
            </summary>
            <param name="value">The value that need to be converted.</param>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="provider">The <see cref="T:System.IFormatProvider"/> object.</param>
            <returns>Returns the converted object.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.ReflectionHelper">
            <summary>
            A helper class that provides the functionalities to retrieve information about 
            assemblies, modules, members, parameters, and other entities in managed code.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.ReflectionHelper.GetMethod(System.Type,System.String,System.Int32)">
            <summary>
            Searches for the specified method, using the specified binding constraints.
            </summary>
            <param name="type">The type used to get the method.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="argumentsCount">The integer containing the arguments count of the method to get.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.ReflectionHelper.GetMethod(System.Type,System.String)">
            <summary>
            Searches for the specified method, using the specified binding constraints.
            </summary>
            <param name="type">The type used to get the method.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">name is null.</exception>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.ReflectionHelper.GetProperty(System.Type,System.String)">
            <summary>
            Searches for the specified property, using the specified binding constraints.
            </summary>
            <param name="type">The type used to get the property.</param>
            <param name="propertyName">The string containing the name of the property to get.</param>
            <returns>An object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">name is null.</exception>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.ReflectionHelper.GetField(System.Type,System.String)">
            <summary>
            Searches for the specified field, using the specified binding constraints.
            </summary>
            <param name="type">The type used to get the field.</param>
            <param name="fieldName">The string containing the name of the field to get.</param>
            <returns>An object representing the field that matches the specified requirements, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">name is null.</exception>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.ReflectionHelper.GetValue(System.Object,System.String)">
            <summary>
            Returns the property value of a specified object.
            </summary>
            <param name="obj">The object whose field value will be returned.</param>
            <param name="propertyName">The string containing the name of the property or field to get value.</param>
            <returns>The property value of the specified object.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.ReflectionHelper.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value of a specified object.
            </summary>
            <param name="obj">The object whose property value will be set.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The new property value.</param>
            <returns>Returns true if value set properly, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.ReflectionHelper.Invoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invokes the method or constructor represented by the current instance, using the specified parameters.
            </summary>
            <param name="method">The method information.</param>
            <param name="obj">
            The object on which to invoke the method or constructor. If a method is static,
            this argument is ignored. If a constructor is static, this argument must be null or an instance of the class
            that defines the constructor.
            </param>
            <param name="parameters">An argument list for the invoked method or constructor. This is an array
            of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.</param>
            <returns>
            An object containing the return value of the invoked method, or null in the 
            case of a constructor.CautionElements of the parameters array that represent
            parameters declared with the ref or out keyword may also be modified.
            </returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Utils.TouchHelper">
            <summary>
            A helper class that provides various options to enable or disable the touch gestures for the control.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Core.Utils.TouchHelper.GestureConfigSize">
            <summary>
            Indicates the size of the GESTURECONFIG structure.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.GetTouchPosition(System.Windows.Forms.Message,System.Windows.Forms.Control)">
            <summary>
            Gets the touch position of control when WM_GESTURENOTIFY message raises.
            </summary>
            <param name="message">The touch message.</param>
            <param name="control">The Control.</param>
            <returns>Returns the touch position.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.DisableGestures(System.Windows.Forms.Control)">
            <summary>
            Disables the all touch gestures for the control.
            </summary>
            <param name="control">The control which need to disable the gesture.</param>
            <returns>Returns true when properly disabled all gestures, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.DisableGestures(System.Windows.Forms.Control,Syncfusion.WinForms.Core.Enums.GestureOptions)">
            <summary>
            Disables the gestures for control based on the <see cref="T:Syncfusion.WinForms.Core.Enums.GestureOptions"/> information.
            </summary>
            <param name="control">The control which need to disable the gesture.</param>
            <param name="options">The gesture options.</param>
            <returns>Returns true when properly disabled the gestures mentioned in gesture options, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.DisableGestures(System.Windows.Forms.Control,Syncfusion.WinForms.Core.Enums.GestureOptions,Syncfusion.WinForms.Core.Enums.PanningOptions)">
            <summary>
            Disables the gestures for control based on the <see cref="T:Syncfusion.WinForms.Core.Enums.GestureOptions"/> and <see cref="T:Syncfusion.WinForms.Core.Enums.PanningOptions"/> information.
            </summary>
            <param name="control">The control which need to disable the gesture.</param>
            <param name="options">The touch options.</param>
            <param name="panOptions">The panning options.</param>
            <returns>Returns true when properly disabled the gestures mentioned in touch options, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.EnableGestures(System.Windows.Forms.Control)">
            <summary>
            Enables all the gestures for the given control.
            </summary>
            <param name="control">The control which need to enable the gesture.</param>
            <returns>Returns true when properly enabled the all gestures, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.EnableGestures(System.Windows.Forms.Control,Syncfusion.WinForms.Core.Enums.GestureOptions)">
            <summary>
            Enables the gestures for control based on the <see cref="T:Syncfusion.WinForms.Core.Enums.GestureOptions"/> information.
            </summary>
            <param name="control">The control which need to enable the gesture.</param>
            <param name="options">The gesture options.</param>
            <returns>Returns true when properly enabled the gestures mentioned in gesture options, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.EnableGestures(System.Windows.Forms.Control,Syncfusion.WinForms.Core.Enums.GestureOptions,Syncfusion.WinForms.Core.Enums.PanningOptions)">
            <summary>
            Enables the gestures for control based on the <see cref="T:Syncfusion.WinForms.Core.Enums.GestureOptions"/> and <see cref="T:Syncfusion.WinForms.Core.Enums.PanningOptions"/> information.
            </summary>
            <param name="control">The control which need to enable the gesture.</param>
            <param name="gestureOptions">The gesture options.</param>
            <param name="panOptions">The panning options.</param>
            <returns>Returns true when properly enabled the gestures mentioned in gesture options, otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.GetPanGestureConfig(System.Boolean)">
            <summary>
            Gets the gesture configuration information for panning gesture.
            </summary>
            <param name="enableGesture">The boolean values contains enable or disabled.</param>
            <returns>Returns the gesture configuration value for panning.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.GetPanGestureConfig(Syncfusion.WinForms.Core.Enums.PanningOptions,System.Boolean)">
            <summary>
            Gets the gesture configuration information for panning gesture.
            </summary>
            <param name="panOptions">The panning options.</param>
            <param name="enableGesture">A value indicates the gesture configuration for enable or disable gesture.</param>
            <returns>Returns the gesture configuration information.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.GetZoomGestureConfig(System.Boolean)">
            <summary>
            Gets the gesture configuration for the zooming gesture.
            </summary>
            <param name="enableGesture">A value indicates the gesture configuration for enable or disable gesture.</param>
            <returns>Returns the gesture configuration information.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.GetRotateGestureConfig(System.Boolean)">
            <summary>
            Gets the gesture configuration for the rotate gesture.
            </summary>
            <param name="enableGesture">A value indicates the gesture configuration for enable or disable gesture.</param>
            <returns>Returns the gesture configuration information.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.GetTwoFingerTapGestureConfig(System.Boolean)">
            <summary>
            Gets the gesture configuration for the two finger tap gesture.
            </summary>
            <param name="enableGesture">A value indicates the gesture configuration for enable or disable gesture.</param>
            <returns>Returns the gesture configuration information.</returns>
        </member>
        <member name="M:Syncfusion.WinForms.Core.Utils.TouchHelper.GetPressAndTapGestureConfig(System.Boolean)">
            <summary>
            Gets the gesture configuration for the press and tap gesture.
            </summary>
            <param name="enableGesture">A value indicates the gesture configuration for enable or disable gesture.</param>
            <returns>Returns the gesture configuration information.</returns>
        </member>
        <member name="T:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_LeftEdge">
            <summary>
              Looks up a localized string similar to LeftEdge.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_PageDown">
            <summary>
              Looks up a localized string similar to PageDown.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_PageLeft">
            <summary>
              Looks up a localized string similar to PageLeft.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_PageRight">
            <summary>
              Looks up a localized string similar to Page.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_PageUp">
            <summary>
              Looks up a localized string similar to PageUp.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_RightEdge">
            <summary>
              Looks up a localized string similar to RightEdge.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_ScrollDown">
            <summary>
              Looks up a localized string similar to ScrollDown.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_ScrollHere">
            <summary>
              Looks up a localized string similar to ScrollHere.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_ScrollLeft">
            <summary>
              Looks up a localized string similar to LeftScroll.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_ScrollRight">
            <summary>
              Looks up a localized string similar to RightScroll.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_ScrollUp">
            <summary>
              Looks up a localized string similar to ScrollUp.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Core.Resources.Syncfusion_Core_WinForms.ScrollBar_Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="T:Syncfusion.WinForms.Controls.SfSkinManager">
            <summary>
            Applies and manages the themes for the controls and components which are derived from the <see cref="T:Syncfusion.WinForms.Theme.IThemeProvider"/> and <see cref="T:Syncfusion.Windows.Forms.IVisualStyle"/>  .
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/> applies the themes for the controls or components of <see cref="T:Syncfusion.WinForms.Theme.IThemeProvider"/> type.
            The <b>ThemeName</b> of the <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/> must be available in <see cref="T:Syncfusion.WinForms.Theme.ThemeHelper"/>,
            Otherwise the default theme settings of control or component will be applied.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfSkinManager.component">
            <summary>
            The component of the skin manager.
            </summary>
        </member>
        <member name="F:Syncfusion.WinForms.Controls.SfSkinManager.themeName">
            <summary>
            The string contains the theme name of the skin manager.
            </summary>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/> class and add this to the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> control.</param>
            <remarks>This will allow to create only one <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/> instance in a given container.</remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the assembly to register the theme XML configured files.
            </summary>
            <param name="assembly">An assembly that has the theme XML configuration file.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.SetTheme(System.ComponentModel.Component,System.String)">
            <summary>
            Sets the theme to given control and its inner controls which are derived from the <see cref="T:Syncfusion.WinForms.Theme.IThemeProvider"/>. 
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.Component"/> to set the theme.</param>
            <param name="themeName">A name of the theme to be set to control.</param>
            <remarks>This method will set the theme to controls which is derived from <see cref="T:Syncfusion.WinForms.Theme.IThemeProvider"/>.</remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/> class.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; 
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.ApplyThemeToComponents(System.ComponentModel.Component,System.String)">
            <summary>
            Sets the theme to given Component which are derived from the <see cref="T:Syncfusion.Windows.Forms.IVisualStyle"/> and <see cref="T:Syncfusion.WinForms.Theme.IThemeProvider"/>
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.Component"/> to set the theme.</param>
            <param name="themeName">A name of the theme to be set to component.</param>
            <remarks>
            This method will set the theme to components which is derived from <see cref="T:Syncfusion.Windows.Forms.IVisualStyle"/> and <see cref="T:Syncfusion.WinForms.Theme.IThemeProvider"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Occurs when new control is added to the <b>control</b> which has the theme settings that is set by the <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains events data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.OnControlRemoved(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Occurs when any control is removed from the <b>control</b> which has the theme settings that is set by the <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs"/> contains events data.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.UnWireEvents(System.Windows.Forms.Control)">
            <summary>
            Unwires the <see cref="T:System.Windows.Forms.Control.ControlAdded"/> and <see cref="T:System.Windows.Forms.Control.ControlRemoved"/>
            events of the given controls.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Syncfusion.WinForms.Controls.SfSkinManager.WireEvents(System.Windows.Forms.Control)">
            <summary>
            Wires the <see cref="T:System.Windows.Forms.Control.ControlAdded"/> and <see cref="T:System.Windows.Forms.Control.ControlRemoved"/> 
            events of the given control and its child controls.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfSkinManager.Component">
            <summary>
            Gets or sets the control or component to apply the theme settings.
            </summary>
        </member>
        <member name="P:Syncfusion.WinForms.Controls.SfSkinManager.ThemeName">
            <summary>
            Gets or sets a name of the theme to be applied to control.
            </summary>
            <remarks>The theme name must be available in <see cref="T:Syncfusion.WinForms.Theme.ThemeHelper"/>, Otherwise the 
            default theme settings will be applied to the control of the <see cref="T:Syncfusion.WinForms.Controls.SfSkinManager"/>.
            </remarks>
        </member>
    </members>
</doc>
